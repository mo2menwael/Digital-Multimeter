
Digital Multimeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e90  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00001e90  00001f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022df  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c3  00000000  00000000  0000438f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000df4  00000000  00000000  00004a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00005848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f60  00000000  00000000  00005e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00007d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      44:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      50:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      54:	7e 07       	cpc	r23, r30
      56:	8d 07       	cpc	r24, r29
      58:	d0 07       	cpc	r29, r16
      5a:	af 07       	cpc	r26, r31
      5c:	d0 07       	cpc	r29, r16
      5e:	d0 07       	cpc	r29, r16
      60:	d0 07       	cpc	r29, r16
      62:	d9 06       	cpc	r13, r25
      64:	de 06       	cpc	r13, r30
      66:	10 07       	cpc	r17, r16
      68:	51 07       	cpc	r21, r17
      6a:	60 07       	cpc	r22, r16
      6c:	6f 07       	cpc	r22, r31
      6e:	42 07       	cpc	r20, r18
      70:	47 07       	cpc	r20, r23
      72:	4c 07       	cpc	r20, r28

00000074 <__trampolines_end>:
      74:	6e 61       	ori	r22, 0x1E	; 30
      76:	6e 00       	.word	0x006e	; ????

00000078 <__c.2332>:
      78:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      88:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      98:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      a8:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      b8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      c8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      d8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      e8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      f8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     108:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     118:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     128:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     138:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     148:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     158:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     168:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf e5       	ldi	r28, 0x5F	; 95
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	10 e0       	ldi	r17, 0x00	; 0
     184:	a0 e6       	ldi	r26, 0x60	; 96
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	e0 e9       	ldi	r30, 0x90	; 144
     18a:	fe e1       	ldi	r31, 0x1E	; 30
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	aa 3e       	cpi	r26, 0xEA	; 234
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>
     198:	0e 94 b6 06 	call	0xd6c	; 0xd6c <main>
     19c:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a4 <LCD_displayString>:
#define LCD_port PORTC				//port C is selected as LCD Data port
#define rs PA4						//Register Select signal is connected to port C pin 4
#define en PA5						//Enable signal is connected to port C pin 5

void LCD_displayString(char *txt)         //Data sub routine LCD
{
     1a4:	fc 01       	movw	r30, r24
	while(*txt!='\0')
     1a6:	29 c0       	rjmp	.+82     	; 0x1fa <LCD_displayString+0x56>
	{
		// Send higher nibble
		LCD_port = (*txt & 0xF0);		// Mask lower nibble, send higher nibble
     1a8:	90 7f       	andi	r25, 0xF0	; 240
     1aa:	95 bb       	out	0x15, r25	; 21
		PORTA |= (1<<rs);				// RS = 1 for data
     1ac:	9b b3       	in	r25, 0x1b	; 27
     1ae:	90 61       	ori	r25, 0x10	; 16
     1b0:	9b bb       	out	0x1b, r25	; 27
		PORTA |= (1<<en);				// Enable high
     1b2:	9b b3       	in	r25, 0x1b	; 27
     1b4:	90 62       	ori	r25, 0x20	; 32
     1b6:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b8:	8f e0       	ldi	r24, 0x0F	; 15
     1ba:	97 e2       	ldi	r25, 0x27	; 39
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_displayString+0x18>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_displayString+0x1e>
     1c2:	00 00       	nop
		_delay_ms(5);					// Short delay
		PORTA &= ~(1<<en);				// Enable low
     1c4:	9b b3       	in	r25, 0x1b	; 27
     1c6:	9f 7d       	andi	r25, 0xDF	; 223
     1c8:	9b bb       	out	0x1b, r25	; 27
		
		// Send lower nibble
		LCD_port = ((*txt << 4) & 0xF0); // Shift lower nibble to higher nibble position
     1ca:	21 91       	ld	r18, Z+
     1cc:	90 e1       	ldi	r25, 0x10	; 16
     1ce:	29 9f       	mul	r18, r25
     1d0:	90 01       	movw	r18, r0
     1d2:	11 24       	eor	r1, r1
     1d4:	25 bb       	out	0x15, r18	; 21
		PORTA |= (1<<en);                // Enable high
     1d6:	9b b3       	in	r25, 0x1b	; 27
     1d8:	90 62       	ori	r25, 0x20	; 32
     1da:	9b bb       	out	0x1b, r25	; 27
     1dc:	8f e0       	ldi	r24, 0x0F	; 15
     1de:	97 e2       	ldi	r25, 0x27	; 39
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_displayString+0x3c>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_displayString+0x42>
     1e6:	00 00       	nop
		_delay_ms(5);                    // Short delay
		PORTA &= ~(1<<en);               // Enable low
     1e8:	9b b3       	in	r25, 0x1b	; 27
     1ea:	9f 7d       	andi	r25, 0xDF	; 223
     1ec:	9b bb       	out	0x1b, r25	; 27
     1ee:	8f e1       	ldi	r24, 0x1F	; 31
     1f0:	9e e4       	ldi	r25, 0x4E	; 78
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_displayString+0x4e>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <LCD_displayString+0x54>
     1f8:	00 00       	nop
#define rs PA4						//Register Select signal is connected to port C pin 4
#define en PA5						//Enable signal is connected to port C pin 5

void LCD_displayString(char *txt)         //Data sub routine LCD
{
	while(*txt!='\0')
     1fa:	90 81       	ld	r25, Z
     1fc:	91 11       	cpse	r25, r1
     1fe:	d4 cf       	rjmp	.-88     	; 0x1a8 <LCD_displayString+0x4>
		_delay_ms(5);                    // Short delay
		PORTA &= ~(1<<en);               // Enable low
		_delay_ms(10);                   // Wait for the data to write
		txt++;
	}
}
     200:	08 95       	ret

00000202 <LCD_sendCommand>:

void LCD_sendCommand(char cmd)           //Command sub routine LCD
{
	// Send higher nibble
	LCD_port = (cmd & 0xF0);		// Mask lower nibble, send higher nibble
     202:	98 2f       	mov	r25, r24
     204:	90 7f       	andi	r25, 0xF0	; 240
     206:	95 bb       	out	0x15, r25	; 21
	PORTA &= ~(1<<rs);				// RS = 0 for command
     208:	9b b3       	in	r25, 0x1b	; 27
     20a:	9f 7e       	andi	r25, 0xEF	; 239
     20c:	9b bb       	out	0x1b, r25	; 27
	PORTA |= (1<<en);				// Enable high
     20e:	9b b3       	in	r25, 0x1b	; 27
     210:	90 62       	ori	r25, 0x20	; 32
     212:	9b bb       	out	0x1b, r25	; 27
     214:	ef e0       	ldi	r30, 0x0F	; 15
     216:	f7 e2       	ldi	r31, 0x27	; 39
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_sendCommand+0x16>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_sendCommand+0x1c>
     21e:	00 00       	nop
	_delay_ms(5);					// Short delay
	PORTA &= ~(1<<en);				// Enable low
     220:	9b b3       	in	r25, 0x1b	; 27
     222:	9f 7d       	andi	r25, 0xDF	; 223
     224:	9b bb       	out	0x1b, r25	; 27
	
	// Send lower nibble
	LCD_port = ((cmd << 4) & 0xF0); // Shift lower nibble to higher nibble position
     226:	f0 e1       	ldi	r31, 0x10	; 16
     228:	8f 9f       	mul	r24, r31
     22a:	c0 01       	movw	r24, r0
     22c:	11 24       	eor	r1, r1
     22e:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<en);               // Enable high
     230:	8b b3       	in	r24, 0x1b	; 27
     232:	80 62       	ori	r24, 0x20	; 32
     234:	8b bb       	out	0x1b, r24	; 27
     236:	8f e0       	ldi	r24, 0x0F	; 15
     238:	97 e2       	ldi	r25, 0x27	; 39
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_sendCommand+0x38>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_sendCommand+0x3e>
     240:	00 00       	nop
	_delay_ms(5);                   // Short delay
	PORTA &= ~(1<<en);              // Enable low
     242:	8b b3       	in	r24, 0x1b	; 27
     244:	8f 7d       	andi	r24, 0xDF	; 223
     246:	8b bb       	out	0x1b, r24	; 27
     248:	ef e1       	ldi	r30, 0x1F	; 31
     24a:	fe e4       	ldi	r31, 0x4E	; 78
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_sendCommand+0x4a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_sendCommand+0x50>
     252:	00 00       	nop
     254:	08 95       	ret

00000256 <LCD_clearScreen>:
	_delay_ms(10);                  // Wait for the command to execute
}

void LCD_clearScreen(void)
{
	LCD_sendCommand(0x01);
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     25c:	08 95       	ret

0000025e <init_LCD>:
#define INIT_LCD_H_


void init_LCD(void)
{
	LCD_sendCommand(0x02);					//Send for 4-bit initialization of LCD
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_sendCommand(0x28);					//2 line, 5*7 matrix in 4-bit mode
     264:	88 e2       	ldi	r24, 0x28	; 40
     266:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_clearScreen();						//Clear LCD display
     26a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
     26e:	8f e0       	ldi	r24, 0x0F	; 15
     270:	97 e2       	ldi	r25, 0x27	; 39
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <init_LCD+0x14>
     276:	00 c0       	rjmp	.+0      	; 0x278 <init_LCD+0x1a>
     278:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x0c);					 //Display on, Cursor off
     27a:	8c e0       	ldi	r24, 0x0C	; 12
     27c:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     280:	8f e0       	ldi	r24, 0x0F	; 15
     282:	97 e2       	ldi	r25, 0x27	; 39
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <init_LCD+0x26>
     288:	00 c0       	rjmp	.+0      	; 0x28a <init_LCD+0x2c>
     28a:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x82);					//Go to first line and 2nd position
     28c:	82 e8       	ldi	r24, 0x82	; 130
     28e:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	97 e2       	ldi	r25, 0x27	; 39
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	f1 f7       	brne	.-4      	; 0x296 <init_LCD+0x38>
     29a:	00 c0       	rjmp	.+0      	; 0x29c <init_LCD+0x3e>
     29c:	00 00       	nop
	_delay_ms(5);
	LCD_displayString("Which mode ?");
     29e:	80 e6       	ldi	r24, 0x60	; 96
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     2a6:	8f e3       	ldi	r24, 0x3F	; 63
     2a8:	9c e9       	ldi	r25, 0x9C	; 156
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <init_LCD+0x4c>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <init_LCD+0x52>
     2b0:	00 00       	nop
	_delay_ms(20);
	LCD_sendCommand(0x82);				   //Delete previous line
     2b2:	82 e8       	ldi	r24, 0x82	; 130
     2b4:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("            ");
     2b8:	8d e8       	ldi	r24, 0x8D	; 141
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     2c0:	8f e0       	ldi	r24, 0x0F	; 15
     2c2:	97 e2       	ldi	r25, 0x27	; 39
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <init_LCD+0x66>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <init_LCD+0x6c>
     2ca:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x82);				   //Go to first line and 2nd position
     2cc:	82 e8       	ldi	r24, 0x82	; 130
     2ce:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("1:Volt 2:Amp");
     2d2:	8d e6       	ldi	r24, 0x6D	; 109
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     2da:	8f e0       	ldi	r24, 0x0F	; 15
     2dc:	97 e2       	ldi	r25, 0x27	; 39
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <init_LCD+0x80>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <init_LCD+0x86>
     2e4:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0xc6);				   //Go to second line and 6th position
     2e6:	86 ec       	ldi	r24, 0xC6	; 198
     2e8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("3:Ohm");
     2ec:	8a e7       	ldi	r24, 0x7A	; 122
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	97 e2       	ldi	r25, 0x27	; 39
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <init_LCD+0x9a>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <init_LCD+0xa0>
     2fe:	00 00       	nop
     300:	08 95       	ret

00000302 <ADC_Read>:
#define ADC_READ_H_

uint16_t ADC_Read(uint8_t channel)
{
	unsigned int value;
	ADCSRA |= (1<<ADIF);		//Clear ADIF flag
     302:	96 b1       	in	r25, 0x06	; 6
     304:	90 61       	ori	r25, 0x10	; 16
     306:	96 b9       	out	0x06, r25	; 6
     308:	2f e7       	ldi	r18, 0x7F	; 127
     30a:	38 e3       	ldi	r19, 0x38	; 56
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	21 50       	subi	r18, 0x01	; 1
     310:	30 40       	sbci	r19, 0x00	; 0
     312:	90 40       	sbci	r25, 0x00	; 0
     314:	e1 f7       	brne	.-8      	; 0x30e <ADC_Read+0xc>
     316:	00 c0       	rjmp	.+0      	; 0x318 <ADC_Read+0x16>
     318:	00 00       	nop
	_delay_ms(50);
	ADMUX &= 0xF0;				//Clear the previous channel
     31a:	97 b1       	in	r25, 0x07	; 7
     31c:	90 7f       	andi	r25, 0xF0	; 240
     31e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
     320:	97 b1       	in	r25, 0x07	; 7
     322:	89 2b       	or	r24, r25
     324:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);		//Start new conversion
     326:	86 b1       	in	r24, 0x06	; 6
     328:	80 64       	ori	r24, 0x40	; 64
     32a:	86 b9       	out	0x06, r24	; 6
	while(ADIF==0);				//ADIF is interrupt flag. When it equals 1, it means that the conversion from analog to digital has finished
		value=ADCL|ADCH<<8;		//Shift left ADCH by 8bits then combine it with ADCL with the OR operator "|"
     32c:	24 b1       	in	r18, 0x04	; 4
     32e:	85 b1       	in	r24, 0x05	; 5
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	98 2f       	mov	r25, r24
     334:	88 27       	eor	r24, r24
	return value;
}
     336:	82 2b       	or	r24, r18
     338:	08 95       	ret

0000033a <init_ADC>:
#define INIT_ADC_H_


void init_ADC(void)
{
	ADMUX |= (1<<REFS0);								//Voltage reference from AVCC
     33a:	87 b1       	in	r24, 0x07	; 7
     33c:	80 64       	ori	r24, 0x40	; 64
     33e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);								//Turn on ADC
     340:	86 b1       	in	r24, 0x06	; 6
     342:	80 68       	ori	r24, 0x80	; 128
     344:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADSC);								//Start conversion from analog to digital
     346:	86 b1       	in	r24, 0x06	; 6
     348:	80 64       	ori	r24, 0x40	; 64
     34a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));		//8Mhz/128 = 62.5Khz which is the ADC reference clock
     34c:	86 b1       	in	r24, 0x06	; 6
     34e:	87 60       	ori	r24, 0x07	; 7
     350:	86 b9       	out	0x06, r24	; 6
     352:	08 95       	ret

00000354 <ACcurrent>:
#ifndef ACCURRENT_H_
#define ACCURRENT_H_

#define AC0DC PD5
void ACcurrent(void)			  //Sub routine to read current
{
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <ACcurrent+0xa>
     35e:	00 d0       	rcall	.+0      	; 0x360 <ACcurrent+0xc>
     360:	00 d0       	rcall	.+0      	; 0x362 <ACcurrent+0xe>
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~(1<<AC0DC);					//Set AC0DC(PD5) to zero to choose AC mode
     366:	82 b3       	in	r24, 0x12	; 18
     368:	8f 7d       	andi	r24, 0xDF	; 223
     36a:	82 bb       	out	0x12, r24	; 18
     36c:	2f e7       	ldi	r18, 0x7F	; 127
     36e:	88 e3       	ldi	r24, 0x38	; 56
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	21 50       	subi	r18, 0x01	; 1
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <ACcurrent+0x1e>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <ACcurrent+0x28>
     37c:	00 00       	nop
	_delay_ms(50);
	char Ioutput[6] = {' '};
     37e:	fe 01       	movw	r30, r28
     380:	31 96       	adiw	r30, 0x01	; 1
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	df 01       	movw	r26, r30
     386:	1d 92       	st	X+, r1
     388:	8a 95       	dec	r24
     38a:	e9 f7       	brne	.-6      	; 0x386 <ACcurrent+0x32>
     38c:	80 e2       	ldi	r24, 0x20	; 32
     38e:	89 83       	std	Y+1, r24	; 0x01
	float the_current = 0;
	int vout = ADC_Read(0);					//Read from ADC0
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 81 01 	call	0x302	; 0x302 <ADC_Read>
	float real_vout = vout*0.00488;			//To get the real value from the ADC (0.00488 = Vref/(2^#ADC bits))
     396:	bc 01       	movw	r22, r24
     398:	99 0f       	add	r25, r25
     39a:	88 0b       	sbc	r24, r24
     39c:	99 0b       	sbc	r25, r25
     39e:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatsisf>
     3a2:	28 e6       	ldi	r18, 0x68	; 104
     3a4:	38 ee       	ldi	r19, 0xE8	; 232
     3a6:	4f e9       	ldi	r20, 0x9F	; 159
     3a8:	5b e3       	ldi	r21, 0x3B	; 59
     3aa:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
	
	if(PORTD==0b11010100)
     3ae:	22 b3       	in	r18, 0x12	; 18
     3b0:	24 3d       	cpi	r18, 0xD4	; 212
     3b2:	39 f4       	brne	.+14     	; 0x3c2 <ACcurrent+0x6e>
		the_current = real_vout/0.02;
     3b4:	2a e0       	ldi	r18, 0x0A	; 10
     3b6:	37 ed       	ldi	r19, 0xD7	; 215
     3b8:	43 ea       	ldi	r20, 0xA3	; 163
     3ba:	5c e3       	ldi	r21, 0x3C	; 60
     3bc:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     3c0:	24 c0       	rjmp	.+72     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	else if(PORTD==0b11010101)
     3c2:	22 b3       	in	r18, 0x12	; 18
     3c4:	25 3d       	cpi	r18, 0xD5	; 213
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <ACcurrent+0x8e>
		the_current = (real_vout-0.32)/0.2;
     3c8:	2a e0       	ldi	r18, 0x0A	; 10
     3ca:	37 ed       	ldi	r19, 0xD7	; 215
     3cc:	43 ea       	ldi	r20, 0xA3	; 163
     3ce:	5e e3       	ldi	r21, 0x3E	; 62
     3d0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     3d4:	2d ec       	ldi	r18, 0xCD	; 205
     3d6:	3c ec       	ldi	r19, 0xCC	; 204
     3d8:	4c e4       	ldi	r20, 0x4C	; 76
     3da:	5e e3       	ldi	r21, 0x3E	; 62
     3dc:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     3e0:	14 c0       	rjmp	.+40     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	else if(PORTD==0b11010110)
     3e2:	22 b3       	in	r18, 0x12	; 18
     3e4:	26 3d       	cpi	r18, 0xD6	; 214
     3e6:	69 f4       	brne	.+26     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		the_current = (real_vout-0.3)/1.955;
     3e8:	2a e9       	ldi	r18, 0x9A	; 154
     3ea:	39 e9       	ldi	r19, 0x99	; 153
     3ec:	49 e9       	ldi	r20, 0x99	; 153
     3ee:	5e e3       	ldi	r21, 0x3E	; 62
     3f0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     3f4:	21 e7       	ldi	r18, 0x71	; 113
     3f6:	3d e3       	ldi	r19, 0x3D	; 61
     3f8:	4a ef       	ldi	r20, 0xFA	; 250
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
void ACcurrent(void)			  //Sub routine to read current
{
	PORTD &= ~(1<<AC0DC);					//Set AC0DC(PD5) to zero to choose AC mode
	_delay_ms(50);
	char Ioutput[6] = {' '};
	float the_current = 0;
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
	else if(PORTD==0b11010101)
		the_current = (real_vout-0.32)/0.2;
	else if(PORTD==0b11010110)
		the_current = (real_vout-0.3)/1.955;
	
	sprintf(Ioutput,"%.2f",the_current);	//Float(real_vout) to char(Ioutput) conversion for printing
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	7f 93       	push	r23
     410:	6f 93       	push	r22
     412:	80 e8       	ldi	r24, 0x80	; 128
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9f 93       	push	r25
     418:	8f 93       	push	r24
     41a:	8e 01       	movw	r16, r28
     41c:	0f 5f       	subi	r16, 0xFF	; 255
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	1f 93       	push	r17
     422:	0f 93       	push	r16
     424:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
											//(%.2f) means that it will take 2 digits after the dot
	LCD_sendCommand(0x82);							//bring cursor to position 2 of line 0
     428:	82 e8       	ldi	r24, 0x82	; 130
     42a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("I =");
     42e:	85 e8       	ldi	r24, 0x85	; 133
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     436:	bf e7       	ldi	r27, 0x7F	; 127
     438:	28 e3       	ldi	r18, 0x38	; 56
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	b1 50       	subi	r27, 0x01	; 1
     43e:	20 40       	sbci	r18, 0x00	; 0
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	e1 f7       	brne	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     446:	00 00       	nop
	_delay_ms(50);
	LCD_sendCommand(0x86);
     448:	86 e8       	ldi	r24, 0x86	; 134
     44a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("      ");						//clear previous result
     44e:	83 e9       	ldi	r24, 0x93	; 147
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     456:	9f e7       	ldi	r25, 0x7F	; 127
     458:	a8 e3       	ldi	r26, 0x38	; 56
     45a:	b1 e0       	ldi	r27, 0x01	; 1
     45c:	91 50       	subi	r25, 0x01	; 1
     45e:	a0 40       	sbci	r26, 0x00	; 0
     460:	b0 40       	sbci	r27, 0x00	; 0
     462:	e1 f7       	brne	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     466:	00 00       	nop
	_delay_ms(50);
	LCD_sendCommand(0x86);							//bring cursor to position 6 of line 0
     468:	86 e8       	ldi	r24, 0x86	; 134
     46a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString(Ioutput);
     46e:	c8 01       	movw	r24, r16
     470:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
	LCD_sendCommand(0x8d);							//bring cursor to position 13 of line 0
     474:	8d e8       	ldi	r24, 0x8D	; 141
     476:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("mA");
     47a:	8f ec       	ldi	r24, 0xCF	; 207
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     482:	2f e7       	ldi	r18, 0x7F	; 127
     484:	88 e3       	ldi	r24, 0x38	; 56
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	80 40       	sbci	r24, 0x00	; 0
     48c:	90 40       	sbci	r25, 0x00	; 0
     48e:	e1 f7       	brne	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     492:	00 00       	nop
	_delay_ms(50);
	LCD_sendCommand(0xc0);							//clear 2nd line
     494:	80 ec       	ldi	r24, 0xC0	; 192
     496:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("                ");
     49a:	89 e8       	ldi	r24, 0x89	; 137
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     4a2:	af e7       	ldi	r26, 0x7F	; 127
     4a4:	b8 e3       	ldi	r27, 0x38	; 56
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	a1 50       	subi	r26, 0x01	; 1
     4aa:	b0 40       	sbci	r27, 0x00	; 0
     4ac:	20 40       	sbci	r18, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
	_delay_ms(50);
}
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	26 96       	adiw	r28, 0x06	; 6
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <ACvoltage>:
#ifndef ACVOLTAGE_H_
#define ACVOLTAGE_H_

#define AC0DC PD5
void ACvoltage(void)             //Sub routine to read voltage
{
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	00 d0       	rcall	.+0      	; 0x4de <ACvoltage+0xa>
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <ACvoltage+0xc>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <ACvoltage+0xe>
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~(1<<AC0DC);				//Set AC0DC(PD5) to zero to choose AC mode
     4e6:	82 b3       	in	r24, 0x12	; 18
     4e8:	8f 7d       	andi	r24, 0xDF	; 223
     4ea:	82 bb       	out	0x12, r24	; 18
     4ec:	2f e7       	ldi	r18, 0x7F	; 127
     4ee:	88 e3       	ldi	r24, 0x38	; 56
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <ACvoltage+0x1e>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <ACvoltage+0x28>
     4fc:	00 00       	nop
	_delay_ms(50);
	char Voutput[6] = {' '};
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5f       	subi	r16, 0xFF	; 255
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	86 e0       	ldi	r24, 0x06	; 6
     506:	f8 01       	movw	r30, r16
     508:	11 92       	st	Z+, r1
     50a:	8a 95       	dec	r24
     50c:	e9 f7       	brne	.-6      	; 0x508 <ACvoltage+0x34>
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	89 83       	std	Y+1, r24	; 0x01
	float volt;
	int vout = ADC_Read(0);				//Read from ADC0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 81 01 	call	0x302	; 0x302 <ADC_Read>
	float real_vout = vout*0.00488;		//To get the real value from the ADC (0.00488 = Vref/(2^#ADC bits))
     518:	bc 01       	movw	r22, r24
     51a:	99 0f       	add	r25, r25
     51c:	88 0b       	sbc	r24, r24
     51e:	99 0b       	sbc	r25, r25
     520:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatsisf>
     524:	28 e6       	ldi	r18, 0x68	; 104
     526:	38 ee       	ldi	r19, 0xE8	; 232
     528:	4f e9       	ldi	r20, 0x9F	; 159
     52a:	5b e3       	ldi	r21, 0x3B	; 59
     52c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
	int diff_gain = 10;
	volt = real_vout*diff_gain;
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e2       	ldi	r20, 0x20	; 32
     536:	51 e4       	ldi	r21, 0x41	; 65
     538:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
	
	sprintf(Voutput,"%.2f",volt);		//Float(volt) to char(Voutput) conversion for printing
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	7f 93       	push	r23
     542:	6f 93       	push	r22
     544:	80 e8       	ldi	r24, 0x80	; 128
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	1f 93       	push	r17
     54e:	0f 93       	push	r16
     550:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
										//(%.2f) means that it will take 2 digits after the dot
	LCD_sendCommand(0x82);						//bring cursor to position 3 of line 0
     554:	82 e8       	ldi	r24, 0x82	; 130
     556:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("V =");
     55a:	8a e9       	ldi	r24, 0x9A	; 154
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     562:	8f e0       	ldi	r24, 0x0F	; 15
     564:	97 e2       	ldi	r25, 0x27	; 39
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <ACvoltage+0x92>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <ACvoltage+0x98>
     56c:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);
     56e:	86 e8       	ldi	r24, 0x86	; 134
     570:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("     ");					//clear previous result
     574:	84 e9       	ldi	r24, 0x94	; 148
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     57c:	ef e0       	ldi	r30, 0x0F	; 15
     57e:	f7 e2       	ldi	r31, 0x27	; 39
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <ACvoltage+0xac>
     584:	00 c0       	rjmp	.+0      	; 0x586 <ACvoltage+0xb2>
     586:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);						//bring cursor to position 7 of line 0
     588:	86 e8       	ldi	r24, 0x86	; 134
     58a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString(Voutput);
     58e:	c8 01       	movw	r24, r16
     590:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
	LCD_sendCommand(0x8d);						//bring cursor to position 12 of line 0
     594:	8d e8       	ldi	r24, 0x8D	; 141
     596:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("V");
     59a:	8e e9       	ldi	r24, 0x9E	; 158
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     5a2:	8f e0       	ldi	r24, 0x0F	; 15
     5a4:	97 e2       	ldi	r25, 0x27	; 39
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <ACvoltage+0xd2>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <ACvoltage+0xd8>
     5ac:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0xc0);							//clear 2nd line
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("                ");
     5b4:	89 e8       	ldi	r24, 0x89	; 137
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     5bc:	ef e0       	ldi	r30, 0x0F	; 15
     5be:	f7 e2       	ldi	r31, 0x27	; 39
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <ACvoltage+0xec>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <ACvoltage+0xf2>
     5c6:	00 00       	nop
	_delay_ms(5);
}
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	26 96       	adiw	r28, 0x06	; 6
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <DCcurrent>:
#ifndef DCCURRENT_H_
#define DCCURRENT_H_

#define AC0DC PD5
void DCcurrent(void)			  //Sub routine to read current
{
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DCcurrent+0xa>
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DCcurrent+0xc>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <DCcurrent+0xe>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
	PORTD |= (1<<AC0DC);					//Set AC0DC(PD5) to one to choose DC mode
     5fa:	82 b3       	in	r24, 0x12	; 18
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	82 bb       	out	0x12, r24	; 18
     600:	2f e7       	ldi	r18, 0x7F	; 127
     602:	88 e3       	ldi	r24, 0x38	; 56
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	21 50       	subi	r18, 0x01	; 1
     608:	80 40       	sbci	r24, 0x00	; 0
     60a:	90 40       	sbci	r25, 0x00	; 0
     60c:	e1 f7       	brne	.-8      	; 0x606 <DCcurrent+0x1e>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <DCcurrent+0x28>
     610:	00 00       	nop
	_delay_ms(50);
	char Ioutput[6] = {' '};
     612:	fe 01       	movw	r30, r28
     614:	31 96       	adiw	r30, 0x01	; 1
     616:	86 e0       	ldi	r24, 0x06	; 6
     618:	df 01       	movw	r26, r30
     61a:	1d 92       	st	X+, r1
     61c:	8a 95       	dec	r24
     61e:	e9 f7       	brne	.-6      	; 0x61a <DCcurrent+0x32>
     620:	80 e2       	ldi	r24, 0x20	; 32
     622:	89 83       	std	Y+1, r24	; 0x01
	float the_current = 0;
	int vout = ADC_Read(0);					//Read from ADC0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 81 01 	call	0x302	; 0x302 <ADC_Read>
	float real_vout = vout*0.00488;			//To get the real value from the ADC (0.00488 = Vref/(2^#ADC bits))
     62a:	bc 01       	movw	r22, r24
     62c:	99 0f       	add	r25, r25
     62e:	88 0b       	sbc	r24, r24
     630:	99 0b       	sbc	r25, r25
     632:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatsisf>
     636:	28 e6       	ldi	r18, 0x68	; 104
     638:	38 ee       	ldi	r19, 0xE8	; 232
     63a:	4f e9       	ldi	r20, 0x9F	; 159
     63c:	5b e3       	ldi	r21, 0x3B	; 59
     63e:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
	
	if(PORTD==0b11110100)	
     642:	22 b3       	in	r18, 0x12	; 18
     644:	24 3f       	cpi	r18, 0xF4	; 244
     646:	39 f4       	brne	.+14     	; 0x656 <DCcurrent+0x6e>
		the_current = real_vout/0.02;
     648:	2a e0       	ldi	r18, 0x0A	; 10
     64a:	37 ed       	ldi	r19, 0xD7	; 215
     64c:	43 ea       	ldi	r20, 0xA3	; 163
     64e:	5c e3       	ldi	r21, 0x3C	; 60
     650:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     654:	24 c0       	rjmp	.+72     	; 0x69e <DCcurrent+0xb6>
	else if(PORTD==0b11110101)
     656:	22 b3       	in	r18, 0x12	; 18
     658:	25 3f       	cpi	r18, 0xF5	; 245
     65a:	69 f4       	brne	.+26     	; 0x676 <DCcurrent+0x8e>
		the_current = (real_vout-0.32)/0.2;
     65c:	2a e0       	ldi	r18, 0x0A	; 10
     65e:	37 ed       	ldi	r19, 0xD7	; 215
     660:	43 ea       	ldi	r20, 0xA3	; 163
     662:	5e e3       	ldi	r21, 0x3E	; 62
     664:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     668:	2d ec       	ldi	r18, 0xCD	; 205
     66a:	3c ec       	ldi	r19, 0xCC	; 204
     66c:	4c e4       	ldi	r20, 0x4C	; 76
     66e:	5e e3       	ldi	r21, 0x3E	; 62
     670:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     674:	14 c0       	rjmp	.+40     	; 0x69e <DCcurrent+0xb6>
	else if(PORTD==0b11110110)
     676:	22 b3       	in	r18, 0x12	; 18
     678:	26 3f       	cpi	r18, 0xF6	; 246
     67a:	69 f4       	brne	.+26     	; 0x696 <DCcurrent+0xae>
		the_current = (real_vout-0.3)/1.955;
     67c:	2a e9       	ldi	r18, 0x9A	; 154
     67e:	39 e9       	ldi	r19, 0x99	; 153
     680:	49 e9       	ldi	r20, 0x99	; 153
     682:	5e e3       	ldi	r21, 0x3E	; 62
     684:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     688:	21 e7       	ldi	r18, 0x71	; 113
     68a:	3d e3       	ldi	r19, 0x3D	; 61
     68c:	4a ef       	ldi	r20, 0xFA	; 250
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     694:	04 c0       	rjmp	.+8      	; 0x69e <DCcurrent+0xb6>
void DCcurrent(void)			  //Sub routine to read current
{
	PORTD |= (1<<AC0DC);					//Set AC0DC(PD5) to one to choose DC mode
	_delay_ms(50);
	char Ioutput[6] = {' '};
	float the_current = 0;
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
	else if(PORTD==0b11110101)
		the_current = (real_vout-0.32)/0.2;
	else if(PORTD==0b11110110)
		the_current = (real_vout-0.3)/1.955;
	
	sprintf(Ioutput,"%.2f",the_current);	//Float(real_vout) to char(Ioutput) conversion for printing
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	7f 93       	push	r23
     6a4:	6f 93       	push	r22
     6a6:	80 e8       	ldi	r24, 0x80	; 128
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	8e 01       	movw	r16, r28
     6b0:	0f 5f       	subi	r16, 0xFF	; 255
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	1f 93       	push	r17
     6b6:	0f 93       	push	r16
     6b8:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
											//(%.2f) means that it will take 2 digits after the dot
	LCD_sendCommand(0x82);							//bring cursor to position 2 of line 0
     6bc:	82 e8       	ldi	r24, 0x82	; 130
     6be:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("I =");
     6c2:	85 e8       	ldi	r24, 0x85	; 133
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     6ca:	8f e0       	ldi	r24, 0x0F	; 15
     6cc:	97 e2       	ldi	r25, 0x27	; 39
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <DCcurrent+0xe6>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <DCcurrent+0xec>
     6d4:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);
     6d6:	86 e8       	ldi	r24, 0x86	; 134
     6d8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("      ");						//clear previous result
     6dc:	83 e9       	ldi	r24, 0x93	; 147
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     6e4:	af e0       	ldi	r26, 0x0F	; 15
     6e6:	b7 e2       	ldi	r27, 0x27	; 39
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <DCcurrent+0x100>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <DCcurrent+0x106>
     6ee:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);							//bring cursor to position 6 of line 0
     6f0:	86 e8       	ldi	r24, 0x86	; 134
     6f2:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString(Ioutput);
     6f6:	c8 01       	movw	r24, r16
     6f8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
	LCD_sendCommand(0x8d);							//bring cursor to position 13 of line 0
     6fc:	8d e8       	ldi	r24, 0x8D	; 141
     6fe:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("mA");
     702:	8f ec       	ldi	r24, 0xCF	; 207
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     70a:	8f e0       	ldi	r24, 0x0F	; 15
     70c:	97 e2       	ldi	r25, 0x27	; 39
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <DCcurrent+0x126>
     712:	00 c0       	rjmp	.+0      	; 0x714 <DCcurrent+0x12c>
     714:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0xc0);							//clear 2nd line
     716:	80 ec       	ldi	r24, 0xC0	; 192
     718:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("                ");
     71c:	89 e8       	ldi	r24, 0x89	; 137
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     724:	af e0       	ldi	r26, 0x0F	; 15
     726:	b7 e2       	ldi	r27, 0x27	; 39
     728:	11 97       	sbiw	r26, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <DCcurrent+0x140>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <DCcurrent+0x146>
     72e:	00 00       	nop
	_delay_ms(5);
}
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	26 96       	adiw	r28, 0x06	; 6
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <DCvoltage>:
#ifndef DCVOLTAGE_H_
#define DCVOLTAGE_H_

#define AC0DC PD5
void DCvoltage(void)             //Sub routine to read voltage
{
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	00 d0       	rcall	.+0      	; 0x75a <DCvoltage+0xa>
     75a:	00 d0       	rcall	.+0      	; 0x75c <DCvoltage+0xc>
     75c:	00 d0       	rcall	.+0      	; 0x75e <DCvoltage+0xe>
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
	PORTD |= (1<<AC0DC);				//Set AC0DC(PD5) to one to choose DC mode
     762:	82 b3       	in	r24, 0x12	; 18
     764:	80 62       	ori	r24, 0x20	; 32
     766:	82 bb       	out	0x12, r24	; 18
     768:	2f e7       	ldi	r18, 0x7F	; 127
     76a:	88 e3       	ldi	r24, 0x38	; 56
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <DCvoltage+0x1e>
     776:	00 c0       	rjmp	.+0      	; 0x778 <DCvoltage+0x28>
     778:	00 00       	nop
	_delay_ms(50);
	char Voutput[6] = {' '};
     77a:	8e 01       	movw	r16, r28
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	f8 01       	movw	r30, r16
     784:	11 92       	st	Z+, r1
     786:	8a 95       	dec	r24
     788:	e9 f7       	brne	.-6      	; 0x784 <DCvoltage+0x34>
     78a:	80 e2       	ldi	r24, 0x20	; 32
     78c:	89 83       	std	Y+1, r24	; 0x01
	float volt;
	int vout = ADC_Read(0);				//Read from ADC0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 81 01 	call	0x302	; 0x302 <ADC_Read>
	float real_vout = vout*0.00488;		//To get the real value from the ADC (0.00488 = Vref/(2^#ADC bits))
     794:	bc 01       	movw	r22, r24
     796:	99 0f       	add	r25, r25
     798:	88 0b       	sbc	r24, r24
     79a:	99 0b       	sbc	r25, r25
     79c:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatsisf>
     7a0:	28 e6       	ldi	r18, 0x68	; 104
     7a2:	38 ee       	ldi	r19, 0xE8	; 232
     7a4:	4f e9       	ldi	r20, 0x9F	; 159
     7a6:	5b e3       	ldi	r21, 0x3B	; 59
     7a8:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
	int diff_gain = 10;
	volt = real_vout*diff_gain;
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e2       	ldi	r20, 0x20	; 32
     7b2:	51 e4       	ldi	r21, 0x41	; 65
     7b4:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
	
	sprintf(Voutput,"%.2f",volt);		//Float(volt) to char(Voutput) conversion for printing
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	7f 93       	push	r23
     7be:	6f 93       	push	r22
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
										//(%.2f) means that it will take 2 digits after the dot
	LCD_sendCommand(0x82);						//bring cursor to position 3 of line 0
     7d0:	82 e8       	ldi	r24, 0x82	; 130
     7d2:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("V =");
     7d6:	8a e9       	ldi	r24, 0x9A	; 154
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     7de:	8f e0       	ldi	r24, 0x0F	; 15
     7e0:	97 e2       	ldi	r25, 0x27	; 39
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <DCvoltage+0x92>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <DCvoltage+0x98>
     7e8:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);
     7ea:	86 e8       	ldi	r24, 0x86	; 134
     7ec:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("     ");					//clear previous result
     7f0:	84 e9       	ldi	r24, 0x94	; 148
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     7f8:	ef e0       	ldi	r30, 0x0F	; 15
     7fa:	f7 e2       	ldi	r31, 0x27	; 39
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <DCvoltage+0xac>
     800:	00 c0       	rjmp	.+0      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     802:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);						//bring cursor to position 7 of line 0
     804:	86 e8       	ldi	r24, 0x86	; 134
     806:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString(Voutput);
     80a:	c8 01       	movw	r24, r16
     80c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
	LCD_sendCommand(0x8d);						//bring cursor to position 12 of line 0
     810:	8d e8       	ldi	r24, 0x8D	; 141
     812:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("V");
     816:	8e e9       	ldi	r24, 0x9E	; 158
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     81e:	8f e0       	ldi	r24, 0x0F	; 15
     820:	97 e2       	ldi	r25, 0x27	; 39
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     828:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0xc0);							//clear 2nd line
     82a:	80 ec       	ldi	r24, 0xC0	; 192
     82c:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("                ");
     830:	89 e8       	ldi	r24, 0x89	; 137
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     838:	ef e0       	ldi	r30, 0x0F	; 15
     83a:	f7 e2       	ldi	r31, 0x27	; 39
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     840:	00 c0       	rjmp	.+0      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     842:	00 00       	nop
	_delay_ms(5);
}
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	26 96       	adiw	r28, 0x06	; 6
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <ohm>:
#ifndef OHM_H_
#define OHM_H_


void ohm(void)				//Sub routine to read resistance
{
     864:	8f 92       	push	r8
     866:	9f 92       	push	r9
     868:	af 92       	push	r10
     86a:	bf 92       	push	r11
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	00 d0       	rcall	.+0      	; 0x87e <ohm+0x1a>
     87e:	00 d0       	rcall	.+0      	; 0x880 <ohm+0x1c>
     880:	00 d0       	rcall	.+0      	; 0x882 <ohm+0x1e>
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
	char R_output[6] = {' '};
     886:	fe 01       	movw	r30, r28
     888:	31 96       	adiw	r30, 0x01	; 1
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	df 01       	movw	r26, r30
     88e:	1d 92       	st	X+, r1
     890:	8a 95       	dec	r24
     892:	e9 f7       	brne	.-6      	; 0x88e <ohm+0x2a>
     894:	80 e2       	ldi	r24, 0x20	; 32
     896:	89 83       	std	Y+1, r24	; 0x01
	float resistance = 0;
	int vout = ADC_Read(1);					//Read from ADC1
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 81 01 	call	0x302	; 0x302 <ADC_Read>
	float real_vout = vout*0.00488;			//To get the real value from the ADC (0.00488 = Vref/(2^#ADC bits))
     89e:	bc 01       	movw	r22, r24
     8a0:	99 0f       	add	r25, r25
     8a2:	88 0b       	sbc	r24, r24
     8a4:	99 0b       	sbc	r25, r25
     8a6:	0e 94 c0 08 	call	0x1180	; 0x1180 <__floatsisf>
     8aa:	28 e6       	ldi	r18, 0x68	; 104
     8ac:	38 ee       	ldi	r19, 0xE8	; 232
     8ae:	4f e9       	ldi	r20, 0x9F	; 159
     8b0:	5b e3       	ldi	r21, 0x3B	; 59
     8b2:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
     8b6:	6b 01       	movw	r12, r22
     8b8:	7c 01       	movw	r14, r24
		
	if(PORTD==0b00000111)
     8ba:	82 b3       	in	r24, 0x12	; 18
     8bc:	87 30       	cpi	r24, 0x07	; 7
     8be:	e9 f4       	brne	.+58     	; 0x8fa <ohm+0x96>
		resistance = (real_vout*185)/(5-real_vout);
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	49 e3       	ldi	r20, 0x39	; 57
     8c6:	53 e4       	ldi	r21, 0x43	; 67
     8c8:	c7 01       	movw	r24, r14
     8ca:	b6 01       	movw	r22, r12
     8cc:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
     8d0:	4b 01       	movw	r8, r22
     8d2:	5c 01       	movw	r10, r24
     8d4:	a7 01       	movw	r20, r14
     8d6:	96 01       	movw	r18, r12
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 ea       	ldi	r24, 0xA0	; 160
     8de:	90 e4       	ldi	r25, 0x40	; 64
     8e0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c5 01       	movw	r24, r10
     8ea:	b4 01       	movw	r22, r8
     8ec:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     8f0:	16 2f       	mov	r17, r22
     8f2:	07 2f       	mov	r16, r23
     8f4:	f8 2e       	mov	r15, r24
     8f6:	e9 2e       	mov	r14, r25
     8f8:	64 c0       	rjmp	.+200    	; 0x9c2 <ohm+0x15e>
	else if(PORTD==0b01000111)
     8fa:	82 b3       	in	r24, 0x12	; 18
     8fc:	87 34       	cpi	r24, 0x47	; 71
     8fe:	e9 f4       	brne	.+58     	; 0x93a <ohm+0xd6>
		resistance = (real_vout*20085)/(5-real_vout);
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	3a ee       	ldi	r19, 0xEA	; 234
     904:	4c e9       	ldi	r20, 0x9C	; 156
     906:	56 e4       	ldi	r21, 0x46	; 70
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
     910:	4b 01       	movw	r8, r22
     912:	5c 01       	movw	r10, r24
     914:	a7 01       	movw	r20, r14
     916:	96 01       	movw	r18, r12
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 ea       	ldi	r24, 0xA0	; 160
     91e:	90 e4       	ldi	r25, 0x40	; 64
     920:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	c5 01       	movw	r24, r10
     92a:	b4 01       	movw	r22, r8
     92c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     930:	16 2f       	mov	r17, r22
     932:	07 2f       	mov	r16, r23
     934:	f8 2e       	mov	r15, r24
     936:	e9 2e       	mov	r14, r25
     938:	44 c0       	rjmp	.+136    	; 0x9c2 <ohm+0x15e>
	else if(PORTD==0b10000111)
     93a:	82 b3       	in	r24, 0x12	; 18
     93c:	87 38       	cpi	r24, 0x87	; 135
     93e:	e9 f4       	brne	.+58     	; 0x97a <ohm+0x116>
		resistance = (real_vout*500e3)/(5-real_vout);
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	34 e2       	ldi	r19, 0x24	; 36
     944:	44 ef       	ldi	r20, 0xF4	; 244
     946:	58 e4       	ldi	r21, 0x48	; 72
     948:	c7 01       	movw	r24, r14
     94a:	b6 01       	movw	r22, r12
     94c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
     954:	a7 01       	movw	r20, r14
     956:	96 01       	movw	r18, r12
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	80 ea       	ldi	r24, 0xA0	; 160
     95e:	90 e4       	ldi	r25, 0x40	; 64
     960:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     970:	16 2f       	mov	r17, r22
     972:	07 2f       	mov	r16, r23
     974:	f8 2e       	mov	r15, r24
     976:	e9 2e       	mov	r14, r25
     978:	24 c0       	rjmp	.+72     	; 0x9c2 <ohm+0x15e>
	else if(PORTD==0b11000111)
     97a:	82 b3       	in	r24, 0x12	; 18
     97c:	87 3c       	cpi	r24, 0xC7	; 199
     97e:	e9 f4       	brne	.+58     	; 0x9ba <ohm+0x156>
		resistance = (real_vout*1e6)/(5-real_vout);
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	34 e2       	ldi	r19, 0x24	; 36
     984:	44 e7       	ldi	r20, 0x74	; 116
     986:	59 e4       	ldi	r21, 0x49	; 73
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulsf3>
     990:	4b 01       	movw	r8, r22
     992:	5c 01       	movw	r10, r24
     994:	a7 01       	movw	r20, r14
     996:	96 01       	movw	r18, r12
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	90 e4       	ldi	r25, 0x40	; 64
     9a0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__subsf3>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	c5 01       	movw	r24, r10
     9aa:	b4 01       	movw	r22, r8
     9ac:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
     9b0:	16 2f       	mov	r17, r22
     9b2:	07 2f       	mov	r16, r23
     9b4:	f8 2e       	mov	r15, r24
     9b6:	e9 2e       	mov	r14, r25
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <ohm+0x15e>


void ohm(void)				//Sub routine to read resistance
{
	char R_output[6] = {' '};
	float resistance = 0;
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	00 e0       	ldi	r16, 0x00	; 0
     9be:	f1 2c       	mov	r15, r1
     9c0:	e1 2c       	mov	r14, r1
	else if(PORTD==0b10000111)
		resistance = (real_vout*500e3)/(5-real_vout);
	else if(PORTD==0b11000111)
		resistance = (real_vout*1e6)/(5-real_vout);
	
	LCD_sendCommand(0x80);							//bring cursor to position 0 of line 0
     9c2:	80 e8       	ldi	r24, 0x80	; 128
     9c4:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("R =");
     9c8:	80 ea       	ldi	r24, 0xA0	; 160
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     9d0:	8f e0       	ldi	r24, 0x0F	; 15
     9d2:	97 e2       	ldi	r25, 0x27	; 39
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <ohm+0x170>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <ohm+0x176>
     9da:	00 00       	nop
	_delay_ms(5);
	
	if(resistance>=1000 && resistance<1e6)
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	4a e7       	ldi	r20, 0x7A	; 122
     9e2:	54 e4       	ldi	r21, 0x44	; 68
     9e4:	61 2f       	mov	r22, r17
     9e6:	70 2f       	mov	r23, r16
     9e8:	8f 2d       	mov	r24, r15
     9ea:	9e 2d       	mov	r25, r14
     9ec:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__gesf2>
     9f0:	88 23       	and	r24, r24
     9f2:	0c f4       	brge	.+2      	; 0x9f6 <ohm+0x192>
     9f4:	4c c0       	rjmp	.+152    	; 0xa8e <ohm+0x22a>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	34 e2       	ldi	r19, 0x24	; 36
     9fa:	44 e7       	ldi	r20, 0x74	; 116
     9fc:	59 e4       	ldi	r21, 0x49	; 73
     9fe:	61 2f       	mov	r22, r17
     a00:	70 2f       	mov	r23, r16
     a02:	8f 2d       	mov	r24, r15
     a04:	9e 2d       	mov	r25, r14
     a06:	0e 94 47 08 	call	0x108e	; 0x108e <__cmpsf2>
     a0a:	88 23       	and	r24, r24
     a0c:	0c f0       	brlt	.+2      	; 0xa10 <ohm+0x1ac>
     a0e:	3f c0       	rjmp	.+126    	; 0xa8e <ohm+0x22a>
	{
		resistance=resistance/1000;
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	4a e7       	ldi	r20, 0x7A	; 122
     a16:	54 e4       	ldi	r21, 0x44	; 68
     a18:	61 2f       	mov	r22, r17
     a1a:	70 2f       	mov	r23, r16
     a1c:	8f 2d       	mov	r24, r15
     a1e:	9e 2d       	mov	r25, r14
     a20:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
		sprintf(R_output,"%.2f",resistance);	//Float(resistance) to char(R_output) conversion for printing
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	7f 93       	push	r23
     a2a:	6f 93       	push	r22
     a2c:	80 e8       	ldi	r24, 0x80	; 128
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	9f 93       	push	r25
     a32:	8f 93       	push	r24
     a34:	8e 01       	movw	r16, r28
     a36:	0f 5f       	subi	r16, 0xFF	; 255
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
     a3a:	1f 93       	push	r17
     a3c:	0f 93       	push	r16
     a3e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
												//(%.2f) means that it will take 2 digits after the dot
		LCD_sendCommand(0x84);
     a42:	84 e8       	ldi	r24, 0x84	; 132
     a44:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString("        ");					//clear previous result
     a48:	81 e9       	ldi	r24, 0x91	; 145
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     a50:	af e0       	ldi	r26, 0x0F	; 15
     a52:	b7 e2       	ldi	r27, 0x27	; 39
     a54:	11 97       	sbiw	r26, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <ohm+0x1f0>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <ohm+0x1f6>
     a5a:	00 00       	nop
		_delay_ms(5);
		LCD_sendCommand(0x84);							//bring cursor to position 4 of line 0
     a5c:	84 e8       	ldi	r24, 0x84	; 132
     a5e:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString(R_output);
     a62:	c8 01       	movw	r24, r16
     a64:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
		LCD_sendCommand(0x8c);							//bring cursor to position 12 of line 0
     a68:	8c e8       	ldi	r24, 0x8C	; 140
     a6a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString("KOhm");
     a6e:	84 ea       	ldi	r24, 0xA4	; 164
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     a76:	8f e0       	ldi	r24, 0x0F	; 15
     a78:	97 e2       	ldi	r25, 0x27	; 39
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <ohm+0x216>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <ohm+0x21c>
     a80:	00 00       	nop
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	80 c0       	rjmp	.+256    	; 0xb8e <ohm+0x32a>
		_delay_ms(5);
	}
	else if(resistance>=1e6)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	34 e2       	ldi	r19, 0x24	; 36
     a92:	44 e7       	ldi	r20, 0x74	; 116
     a94:	59 e4       	ldi	r21, 0x49	; 73
     a96:	61 2f       	mov	r22, r17
     a98:	70 2f       	mov	r23, r16
     a9a:	8f 2d       	mov	r24, r15
     a9c:	9e 2d       	mov	r25, r14
     a9e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__gesf2>
     aa2:	88 23       	and	r24, r24
     aa4:	0c f4       	brge	.+2      	; 0xaa8 <ohm+0x244>
     aa6:	3f c0       	rjmp	.+126    	; 0xb26 <ohm+0x2c2>
	{
		resistance=resistance/1e6;
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	34 e2       	ldi	r19, 0x24	; 36
     aac:	44 e7       	ldi	r20, 0x74	; 116
     aae:	59 e4       	ldi	r21, 0x49	; 73
     ab0:	61 2f       	mov	r22, r17
     ab2:	70 2f       	mov	r23, r16
     ab4:	8f 2d       	mov	r24, r15
     ab6:	9e 2d       	mov	r25, r14
     ab8:	0e 94 4c 08 	call	0x1098	; 0x1098 <__divsf3>
		sprintf(R_output,"%.2f",resistance);	//Float(resistance) to char(R_output) conversion for printing
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	7f 93       	push	r23
     ac2:	6f 93       	push	r22
     ac4:	80 e8       	ldi	r24, 0x80	; 128
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	8e 01       	movw	r16, r28
     ace:	0f 5f       	subi	r16, 0xFF	; 255
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	1f 93       	push	r17
     ad4:	0f 93       	push	r16
     ad6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
												//(%.2f) means that it will take 2 digits after the dot
		LCD_sendCommand(0x84);
     ada:	84 e8       	ldi	r24, 0x84	; 132
     adc:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString("        ");					//clear previous result
     ae0:	81 e9       	ldi	r24, 0x91	; 145
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     ae8:	8f e0       	ldi	r24, 0x0F	; 15
     aea:	97 e2       	ldi	r25, 0x27	; 39
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	f1 f7       	brne	.-4      	; 0xaec <ohm+0x288>
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <ohm+0x28e>
     af2:	00 00       	nop
		_delay_ms(5);
		LCD_sendCommand(0x84);							//bring cursor to position 4 of line 0
     af4:	84 e8       	ldi	r24, 0x84	; 132
     af6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString(R_output);
     afa:	c8 01       	movw	r24, r16
     afc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
		LCD_sendCommand(0x8c);							//bring cursor to position 12 of line 0
     b00:	8c e8       	ldi	r24, 0x8C	; 140
     b02:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString("MOhm");
     b06:	89 ea       	ldi	r24, 0xA9	; 169
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     b0e:	af e0       	ldi	r26, 0x0F	; 15
     b10:	b7 e2       	ldi	r27, 0x27	; 39
     b12:	11 97       	sbiw	r26, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <ohm+0x2ae>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <ohm+0x2b4>
     b18:	00 00       	nop
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	34 c0       	rjmp	.+104    	; 0xb8e <ohm+0x32a>
		_delay_ms(5);
	}
	else
	{
		sprintf(R_output,"%.2f",resistance);			//Float(resistance) to char(R_output) conversion for printing
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	80 e8       	ldi	r24, 0x80	; 128
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	8e 01       	movw	r16, r28
     b38:	0f 5f       	subi	r16, 0xFF	; 255
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	1f 93       	push	r17
     b3e:	0f 93       	push	r16
     b40:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sprintf>
														//(%.2f) means that it will take 2 digits after the dot
		LCD_sendCommand(0x84);
     b44:	84 e8       	ldi	r24, 0x84	; 132
     b46:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString("        ");					//clear previous result
     b4a:	81 e9       	ldi	r24, 0x91	; 145
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     b52:	af e0       	ldi	r26, 0x0F	; 15
     b54:	b7 e2       	ldi	r27, 0x27	; 39
     b56:	11 97       	sbiw	r26, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <ohm+0x2f2>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <ohm+0x2f8>
     b5c:	00 00       	nop
		_delay_ms(5);
		LCD_sendCommand(0x84);							//bring cursor to position 4 of line 0
     b5e:	84 e8       	ldi	r24, 0x84	; 132
     b60:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString(R_output);
     b64:	c8 01       	movw	r24, r16
     b66:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
		LCD_sendCommand(0x8c);							//bring cursor to position 12 of line 0
     b6a:	8c e8       	ldi	r24, 0x8C	; 140
     b6c:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
		LCD_displayString("Ohm ");
     b70:	8e ea       	ldi	r24, 0xAE	; 174
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     b78:	8f e0       	ldi	r24, 0x0F	; 15
     b7a:	97 e2       	ldi	r25, 0x27	; 39
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <ohm+0x318>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <ohm+0x31e>
     b82:	00 00       	nop
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
		_delay_ms(5);
	}
}
     b8e:	26 96       	adiw	r28, 0x06	; 6
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	bf 90       	pop	r11
     bac:	af 90       	pop	r10
     bae:	9f 90       	pop	r9
     bb0:	8f 90       	pop	r8
     bb2:	08 95       	ret

00000bb4 <acORdc>:
#define ACORDC_H_


void acORdc(void)
{
	LCD_clearScreen();						//Clear LCD display
     bb4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
     bb8:	8f e0       	ldi	r24, 0x0F	; 15
     bba:	97 e2       	ldi	r25, 0x27	; 39
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <acORdc+0x8>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <acORdc+0xe>
     bc2:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x0c);					 //Display on, Cursor off
     bc4:	8c e0       	ldi	r24, 0x0C	; 12
     bc6:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     bca:	8f e0       	ldi	r24, 0x0F	; 15
     bcc:	97 e2       	ldi	r25, 0x27	; 39
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <acORdc+0x1a>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <acORdc+0x20>
     bd4:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0x86);					//Go to first line and 6th position
     bd6:	86 e8       	ldi	r24, 0x86	; 134
     bd8:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     bdc:	8f e0       	ldi	r24, 0x0F	; 15
     bde:	97 e2       	ldi	r25, 0x27	; 39
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <acORdc+0x2c>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <acORdc+0x32>
     be6:	00 00       	nop
	_delay_ms(5);
	LCD_displayString("+:DC");
     be8:	83 eb       	ldi	r24, 0xB3	; 179
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     bf0:	8f e0       	ldi	r24, 0x0F	; 15
     bf2:	97 e2       	ldi	r25, 0x27	; 39
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	f1 f7       	brne	.-4      	; 0xbf4 <acORdc+0x40>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <acORdc+0x46>
     bfa:	00 00       	nop
	_delay_ms(5);
	LCD_sendCommand(0xc6);					//Go to second line and 6th position
     bfc:	86 ec       	ldi	r24, 0xC6	; 198
     bfe:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
	LCD_displayString("-:AC");
     c02:	88 eb       	ldi	r24, 0xB8	; 184
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     c0a:	8f e0       	ldi	r24, 0x0F	; 15
     c0c:	97 e2       	ldi	r25, 0x27	; 39
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <acORdc+0x5a>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <acORdc+0x60>
     c14:	00 00       	nop
     c16:	08 95       	ret

00000c18 <keypad_scan>:
#define KEYPAD_PIN PINB
#define KEYPAD_DDR DDRB

char keypad_scan(void)
{
	KEYPAD_PORT = 0b11111110;
     c18:	8e ef       	ldi	r24, 0xFE	; 254
     c1a:	88 bb       	out	0x18, r24	; 24
	if((KEYPAD_PIN & (1<<PINB4))==0)
     c1c:	b4 99       	sbic	0x16, 4	; 22
     c1e:	08 c0       	rjmp	.+16     	; 0xc30 <keypad_scan+0x18>
     c20:	8f e6       	ldi	r24, 0x6F	; 111
     c22:	97 e1       	ldi	r25, 0x17	; 23
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <keypad_scan+0xc>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <keypad_scan+0x12>
     c2a:	00 00       	nop
	{
		_delay_ms(3);
		return '7';
     c2c:	87 e3       	ldi	r24, 0x37	; 55
     c2e:	08 95       	ret
	}
	else if((KEYPAD_PIN &(1<<PINB5))==0)
     c30:	b5 99       	sbic	0x16, 5	; 22
     c32:	08 c0       	rjmp	.+16     	; 0xc44 <keypad_scan+0x2c>
     c34:	8f e6       	ldi	r24, 0x6F	; 111
     c36:	97 e1       	ldi	r25, 0x17	; 23
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <keypad_scan+0x20>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <keypad_scan+0x26>
     c3e:	00 00       	nop
	{
		_delay_ms(3);
		return '8';
     c40:	88 e3       	ldi	r24, 0x38	; 56
     c42:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB6))==0)
     c44:	b6 99       	sbic	0x16, 6	; 22
     c46:	08 c0       	rjmp	.+16     	; 0xc58 <keypad_scan+0x40>
     c48:	8f e6       	ldi	r24, 0x6F	; 111
     c4a:	97 e1       	ldi	r25, 0x17	; 23
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <keypad_scan+0x34>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <keypad_scan+0x3a>
     c52:	00 00       	nop
	{
		_delay_ms(3);
		return '9';
     c54:	89 e3       	ldi	r24, 0x39	; 57
     c56:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB7))==0)
     c58:	b7 99       	sbic	0x16, 7	; 22
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <keypad_scan+0x54>
     c5c:	8f e6       	ldi	r24, 0x6F	; 111
     c5e:	97 e1       	ldi	r25, 0x17	; 23
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <keypad_scan+0x48>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <keypad_scan+0x4e>
     c66:	00 00       	nop
	{
		_delay_ms(3);
		return '/';
     c68:	8f e2       	ldi	r24, 0x2F	; 47
     c6a:	08 95       	ret
	}
	KEYPAD_PORT = 0b11111101;
     c6c:	8d ef       	ldi	r24, 0xFD	; 253
     c6e:	88 bb       	out	0x18, r24	; 24
	if((KEYPAD_PIN & (1<<PINB4))==0)
     c70:	b4 99       	sbic	0x16, 4	; 22
     c72:	08 c0       	rjmp	.+16     	; 0xc84 <keypad_scan+0x6c>
     c74:	8f e6       	ldi	r24, 0x6F	; 111
     c76:	97 e1       	ldi	r25, 0x17	; 23
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <keypad_scan+0x60>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <keypad_scan+0x66>
     c7e:	00 00       	nop
	{
		_delay_ms(3);
		return '4';
     c80:	84 e3       	ldi	r24, 0x34	; 52
     c82:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB5))==0)
     c84:	b5 99       	sbic	0x16, 5	; 22
     c86:	08 c0       	rjmp	.+16     	; 0xc98 <keypad_scan+0x80>
     c88:	8f e6       	ldi	r24, 0x6F	; 111
     c8a:	97 e1       	ldi	r25, 0x17	; 23
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <keypad_scan+0x74>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <keypad_scan+0x7a>
     c92:	00 00       	nop
	{
		_delay_ms(3);
		return '5';
     c94:	85 e3       	ldi	r24, 0x35	; 53
     c96:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB6))==0)
     c98:	b6 99       	sbic	0x16, 6	; 22
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <keypad_scan+0x94>
     c9c:	8f e6       	ldi	r24, 0x6F	; 111
     c9e:	97 e1       	ldi	r25, 0x17	; 23
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <keypad_scan+0x88>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <keypad_scan+0x8e>
     ca6:	00 00       	nop
	{
		_delay_ms(3);
		return '6';
     ca8:	86 e3       	ldi	r24, 0x36	; 54
     caa:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB7))==0)
     cac:	b7 99       	sbic	0x16, 7	; 22
     cae:	08 c0       	rjmp	.+16     	; 0xcc0 <keypad_scan+0xa8>
     cb0:	8f e6       	ldi	r24, 0x6F	; 111
     cb2:	97 e1       	ldi	r25, 0x17	; 23
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <keypad_scan+0x9c>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <keypad_scan+0xa2>
     cba:	00 00       	nop
	{
		_delay_ms(3);
		return '*';
     cbc:	8a e2       	ldi	r24, 0x2A	; 42
     cbe:	08 95       	ret
	}
	KEYPAD_PORT = 0b11111011;
     cc0:	8b ef       	ldi	r24, 0xFB	; 251
     cc2:	88 bb       	out	0x18, r24	; 24
	if((KEYPAD_PIN & (1<<PINB4))==0)
     cc4:	b4 99       	sbic	0x16, 4	; 22
     cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <keypad_scan+0xc0>
     cc8:	8f e6       	ldi	r24, 0x6F	; 111
     cca:	97 e1       	ldi	r25, 0x17	; 23
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <keypad_scan+0xb4>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <keypad_scan+0xba>
     cd2:	00 00       	nop
	{
		_delay_ms(3);
		return '1';
     cd4:	81 e3       	ldi	r24, 0x31	; 49
     cd6:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB5))==0)
     cd8:	b5 99       	sbic	0x16, 5	; 22
     cda:	08 c0       	rjmp	.+16     	; 0xcec <keypad_scan+0xd4>
     cdc:	8f e6       	ldi	r24, 0x6F	; 111
     cde:	97 e1       	ldi	r25, 0x17	; 23
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <keypad_scan+0xc8>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <keypad_scan+0xce>
     ce6:	00 00       	nop
	{
		_delay_ms(3);
		return '2';
     ce8:	82 e3       	ldi	r24, 0x32	; 50
     cea:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB6))==0)
     cec:	b6 99       	sbic	0x16, 6	; 22
     cee:	08 c0       	rjmp	.+16     	; 0xd00 <keypad_scan+0xe8>
     cf0:	8f e6       	ldi	r24, 0x6F	; 111
     cf2:	97 e1       	ldi	r25, 0x17	; 23
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <keypad_scan+0xdc>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <keypad_scan+0xe2>
     cfa:	00 00       	nop
	{
		_delay_ms(3);
		return '3';
     cfc:	83 e3       	ldi	r24, 0x33	; 51
     cfe:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB7))==0)
     d00:	b7 99       	sbic	0x16, 7	; 22
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <keypad_scan+0xfc>
     d04:	8f e6       	ldi	r24, 0x6F	; 111
     d06:	97 e1       	ldi	r25, 0x17	; 23
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <keypad_scan+0xf0>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <keypad_scan+0xf6>
     d0e:	00 00       	nop
	{
		_delay_ms(3);
		return '-';
     d10:	8d e2       	ldi	r24, 0x2D	; 45
     d12:	08 95       	ret
	}
	KEYPAD_PORT = 0b11110111;
     d14:	87 ef       	ldi	r24, 0xF7	; 247
     d16:	88 bb       	out	0x18, r24	; 24
	if((KEYPAD_PIN & (1<<PINB4))==0)
     d18:	b4 99       	sbic	0x16, 4	; 22
     d1a:	08 c0       	rjmp	.+16     	; 0xd2c <keypad_scan+0x114>
     d1c:	8f e6       	ldi	r24, 0x6F	; 111
     d1e:	97 e1       	ldi	r25, 0x17	; 23
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <keypad_scan+0x108>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <keypad_scan+0x10e>
     d26:	00 00       	nop
	{
		_delay_ms(3);
		return 'C';
     d28:	83 e4       	ldi	r24, 0x43	; 67
     d2a:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB5))==0)
     d2c:	b5 99       	sbic	0x16, 5	; 22
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <keypad_scan+0x128>
     d30:	8f e6       	ldi	r24, 0x6F	; 111
     d32:	97 e1       	ldi	r25, 0x17	; 23
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <keypad_scan+0x11c>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <keypad_scan+0x122>
     d3a:	00 00       	nop
	{
		_delay_ms(3);
		return '0';
     d3c:	80 e3       	ldi	r24, 0x30	; 48
     d3e:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB6))==0)
     d40:	b6 99       	sbic	0x16, 6	; 22
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <keypad_scan+0x13c>
     d44:	8f e6       	ldi	r24, 0x6F	; 111
     d46:	97 e1       	ldi	r25, 0x17	; 23
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <keypad_scan+0x130>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <keypad_scan+0x136>
     d4e:	00 00       	nop
	{
		_delay_ms(3);
		return '=';
     d50:	8d e3       	ldi	r24, 0x3D	; 61
     d52:	08 95       	ret
	}
	else if((KEYPAD_PIN & (1<<PINB7))==0)
     d54:	b7 99       	sbic	0x16, 7	; 22
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <keypad_scan+0x150>
     d58:	8f e6       	ldi	r24, 0x6F	; 111
     d5a:	97 e1       	ldi	r25, 0x17	; 23
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <keypad_scan+0x144>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <keypad_scan+0x14a>
     d62:	00 00       	nop
	{
		_delay_ms(3);
		return '+';
     d64:	8b e2       	ldi	r24, 0x2B	; 43
     d66:	08 95       	ret
	}
	
	return '\0';
     d68:	80 e0       	ldi	r24, 0x00	; 0
}
     d6a:	08 95       	ret

00000d6c <main>:
#include "keypad_scan.h"

int main()
{
	char key;					//To store the pressed key
	DDRA=0xF0;					//Set first 4 bits of PORTA as an input and the other 4 bits as an output
     d6c:	80 ef       	ldi	r24, 0xF0	; 240
     d6e:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xFF;					//Set PORTD(MUX Selectors) as an output
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	91 bb       	out	0x11, r25	; 17
	PORTD=0b11000110;			//Initialize PORTD
     d74:	96 ec       	ldi	r25, 0xC6	; 198
     d76:	92 bb       	out	0x12, r25	; 18
	DDRB=0x0F;					//Set PORTB first half(rows) as an output and the second half as an input(columns)
     d78:	9f e0       	ldi	r25, 0x0F	; 15
     d7a:	97 bb       	out	0x17, r25	; 23
	PORTB=0xF0;					//Enable pull-up resistance
     d7c:	88 bb       	out	0x18, r24	; 24
	
	init_LCD();					//Initialize LCD
     d7e:	0e 94 2f 01 	call	0x25e	; 0x25e <init_LCD>
     d82:	8f e1       	ldi	r24, 0x1F	; 31
     d84:	9e e4       	ldi	r25, 0x4E	; 78
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <main+0x1a>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <main+0x20>
     d8c:	00 00       	nop
	_delay_ms(10);
	init_ADC();					//Initialize ADC
     d8e:	0e 94 9d 01 	call	0x33a	; 0x33a <init_ADC>
	
	while (1)
	{
		key = keypad_scan();		//Scan the keypad
     d92:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     d96:	c8 2f       	mov	r28, r24
		if(key != '\0') {
     d98:	88 23       	and	r24, r24
     d9a:	d9 f3       	breq	.-10     	; 0xd92 <main+0x26>
			switch (key) {
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	fc 01       	movw	r30, r24
     da0:	ba 97       	sbiw	r30, 0x2a	; 42
     da2:	e0 31       	cpi	r30, 0x10	; 16
     da4:	f1 05       	cpc	r31, r1
     da6:	08 f0       	brcs	.+2      	; 0xdaa <main+0x3e>
     da8:	fb c0       	rjmp	.+502    	; 0xfa0 <main+0x234>
     daa:	e6 5d       	subi	r30, 0xD6	; 214
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__tablejump2__>
				case '1':			//Voltmeter
				{
					PORTD=0b11001011;
     db2:	8b ec       	ldi	r24, 0xCB	; 203
     db4:	82 bb       	out	0x12, r24	; 18
					acORdc();
     db6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <acORdc>
				}
				break;
     dba:	f2 c0       	rjmp	.+484    	; 0xfa0 <main+0x234>
				case '2':			//Ammeter
				{
					LCD_clearScreen();						 //Clear LCD display
     dbc:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
     dc0:	8f e0       	ldi	r24, 0x0F	; 15
     dc2:	97 e2       	ldi	r25, 0x27	; 39
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <main+0x58>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <main+0x5e>
     dca:	00 00       	nop
					_delay_ms(5);
					LCD_sendCommand(0x0c);					 //Display on, Cursor off
     dcc:	8c e0       	ldi	r24, 0x0C	; 12
     dce:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     dd2:	8f e0       	ldi	r24, 0x0F	; 15
     dd4:	97 e2       	ldi	r25, 0x27	; 39
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <main+0x6a>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <main+0x70>
     ddc:	00 00       	nop
					_delay_ms(5);
					LCD_sendCommand(0x82);					//Go to first line and 2nd position
     dde:	82 e8       	ldi	r24, 0x82	; 130
     de0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     de4:	8f e0       	ldi	r24, 0x0F	; 15
     de6:	97 e2       	ldi	r25, 0x27	; 39
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <main+0x7c>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <main+0x82>
     dee:	00 00       	nop
					_delay_ms(5);
					LCD_displayString("7:2mA 8:20mA");
     df0:	8d eb       	ldi	r24, 0xBD	; 189
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     df8:	8f e0       	ldi	r24, 0x0F	; 15
     dfa:	97 e2       	ldi	r25, 0x27	; 39
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <main+0x90>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <main+0x96>
     e02:	00 00       	nop
					_delay_ms(5);
					LCD_sendCommand(0xc5);					//Go to second line and 5th position
     e04:	85 ec       	ldi	r24, 0xC5	; 197
     e06:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
					LCD_displayString("9:200mA");
     e0a:	8a ec       	ldi	r24, 0xCA	; 202
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     e12:	8f e0       	ldi	r24, 0x0F	; 15
     e14:	97 e2       	ldi	r25, 0x27	; 39
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <main+0xaa>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <main+0xb0>
     e1c:	00 00       	nop
     e1e:	c0 c0       	rjmp	.+384    	; 0xfa0 <main+0x234>
					_delay_ms(5);
				}
				break;
				case '3':			//Ohmmeter
				{
					LCD_clearScreen();						 //Clear LCD display
     e20:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
     e24:	8f e0       	ldi	r24, 0x0F	; 15
     e26:	97 e2       	ldi	r25, 0x27	; 39
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <main+0xbc>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <main+0xc2>
     e2e:	00 00       	nop
					_delay_ms(5);
					LCD_sendCommand(0x0c);					 //Display on, Cursor off
     e30:	8c e0       	ldi	r24, 0x0C	; 12
     e32:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     e36:	8f e0       	ldi	r24, 0x0F	; 15
     e38:	97 e2       	ldi	r25, 0x27	; 39
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <main+0xce>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <main+0xd4>
     e40:	00 00       	nop
					_delay_ms(5);
					LCD_sendCommand(0x82);					//Go to first line and 2nd position
     e42:	82 e8       	ldi	r24, 0x82	; 130
     e44:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
     e48:	8f e0       	ldi	r24, 0x0F	; 15
     e4a:	97 e2       	ldi	r25, 0x27	; 39
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <main+0xe0>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <main+0xe6>
     e52:	00 00       	nop
					_delay_ms(5);
					LCD_displayString("4:550 5:500K");
     e54:	82 ed       	ldi	r24, 0xD2	; 210
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     e5c:	8f e0       	ldi	r24, 0x0F	; 15
     e5e:	97 e2       	ldi	r25, 0x27	; 39
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <main+0xf4>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <main+0xfa>
     e66:	00 00       	nop
					_delay_ms(5);
					LCD_sendCommand(0xc3);					//Go to second line and 3rd position
     e68:	83 ec       	ldi	r24, 0xC3	; 195
     e6a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_sendCommand>
					LCD_displayString("6:1M *:10M");
     e6e:	8f ed       	ldi	r24, 0xDF	; 223
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_displayString>
     e76:	8f e0       	ldi	r24, 0x0F	; 15
     e78:	97 e2       	ldi	r25, 0x27	; 39
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <main+0x10e>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <main+0x114>
     e80:	00 00       	nop
     e82:	8e c0       	rjmp	.+284    	; 0xfa0 <main+0x234>

				}
				break;
				case '7':			//2mA max.
				{
					PORTD=0b11010110;
     e84:	86 ed       	ldi	r24, 0xD6	; 214
     e86:	82 bb       	out	0x12, r24	; 18
					acORdc();
     e88:	0e 94 da 05 	call	0xbb4	; 0xbb4 <acORdc>
				}
				break;
     e8c:	89 c0       	rjmp	.+274    	; 0xfa0 <main+0x234>
				case '8':			//20mA max.
				{
					PORTD=0b11010101;
     e8e:	85 ed       	ldi	r24, 0xD5	; 213
     e90:	82 bb       	out	0x12, r24	; 18
					acORdc();
     e92:	0e 94 da 05 	call	0xbb4	; 0xbb4 <acORdc>
				}
				break;
     e96:	84 c0       	rjmp	.+264    	; 0xfa0 <main+0x234>
				case '9':			//200mA max.
				{
					PORTD=0b11010100;
     e98:	84 ed       	ldi	r24, 0xD4	; 212
     e9a:	82 bb       	out	0x12, r24	; 18
					acORdc();
     e9c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <acORdc>
				}
				break;
     ea0:	7f c0       	rjmp	.+254    	; 0xfa0 <main+0x234>
				case '4':			//550 ohm
				{
					PORTD=0b00000111;
     ea2:	87 e0       	ldi	r24, 0x07	; 7
     ea4:	82 bb       	out	0x12, r24	; 18
					LCD_clearScreen();
     ea6:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
					while(key=='4' || key=='\0')
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <main+0x14a>
						{key = keypad_scan(); ohm();}
     eac:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     eb0:	c8 2f       	mov	r28, r24
     eb2:	0e 94 32 04 	call	0x864	; 0x864 <ohm>
				break;
				case '4':			//550 ohm
				{
					PORTD=0b00000111;
					LCD_clearScreen();
					while(key=='4' || key=='\0')
     eb6:	c4 33       	cpi	r28, 0x34	; 52
     eb8:	c9 f3       	breq	.-14     	; 0xeac <main+0x140>
     eba:	cc 23       	and	r28, r28
     ebc:	b9 f3       	breq	.-18     	; 0xeac <main+0x140>
     ebe:	70 c0       	rjmp	.+224    	; 0xfa0 <main+0x234>
						{key = keypad_scan(); ohm();}
				}
				break;
				case '5':			//500k ohm
				{
					PORTD=0b01000111;
     ec0:	87 e4       	ldi	r24, 0x47	; 71
     ec2:	82 bb       	out	0x12, r24	; 18
					LCD_clearScreen();
     ec4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
					while(key=='5' || key=='\0')
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <main+0x168>
						{key = keypad_scan(); ohm();}
     eca:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     ece:	c8 2f       	mov	r28, r24
     ed0:	0e 94 32 04 	call	0x864	; 0x864 <ohm>
				break;
				case '5':			//500k ohm
				{
					PORTD=0b01000111;
					LCD_clearScreen();
					while(key=='5' || key=='\0')
     ed4:	c5 33       	cpi	r28, 0x35	; 53
     ed6:	c9 f3       	breq	.-14     	; 0xeca <main+0x15e>
     ed8:	cc 23       	and	r28, r28
     eda:	b9 f3       	breq	.-18     	; 0xeca <main+0x15e>
     edc:	61 c0       	rjmp	.+194    	; 0xfa0 <main+0x234>
						{key = keypad_scan(); ohm();}
				}
				break;
				case '6':			//1M ohm
				{
					PORTD=0b10000111;
     ede:	87 e8       	ldi	r24, 0x87	; 135
     ee0:	82 bb       	out	0x12, r24	; 18
					LCD_clearScreen();
     ee2:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
					while(key=='6' || key=='\0')
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <main+0x186>
						{key = keypad_scan(); ohm();}
     ee8:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     eec:	c8 2f       	mov	r28, r24
     eee:	0e 94 32 04 	call	0x864	; 0x864 <ohm>
				break;
				case '6':			//1M ohm
				{
					PORTD=0b10000111;
					LCD_clearScreen();
					while(key=='6' || key=='\0')
     ef2:	c6 33       	cpi	r28, 0x36	; 54
     ef4:	c9 f3       	breq	.-14     	; 0xee8 <main+0x17c>
     ef6:	cc 23       	and	r28, r28
     ef8:	b9 f3       	breq	.-18     	; 0xee8 <main+0x17c>
     efa:	52 c0       	rjmp	.+164    	; 0xfa0 <main+0x234>
						{key = keypad_scan(); ohm();}
				}
				break;
				case '*':			//10M ohm
				{
					PORTD=0b11000111;
     efc:	87 ec       	ldi	r24, 0xC7	; 199
     efe:	82 bb       	out	0x12, r24	; 18
					LCD_clearScreen();
     f00:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_clearScreen>
					while(key=='*' || key=='\0')
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <main+0x1a4>
						{key = keypad_scan(); ohm();}
     f06:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     f0a:	c8 2f       	mov	r28, r24
     f0c:	0e 94 32 04 	call	0x864	; 0x864 <ohm>
				break;
				case '*':			//10M ohm
				{
					PORTD=0b11000111;
					LCD_clearScreen();
					while(key=='*' || key=='\0')
     f10:	ca 32       	cpi	r28, 0x2A	; 42
     f12:	c9 f3       	breq	.-14     	; 0xf06 <main+0x19a>
     f14:	cc 23       	and	r28, r28
     f16:	b9 f3       	breq	.-18     	; 0xf06 <main+0x19a>
     f18:	43 c0       	rjmp	.+134    	; 0xfa0 <main+0x234>
						{key = keypad_scan(); ohm();}
				}
				break;
				case '+':				//DC
				{
					if(PORTD==0b11010110 || PORTD==0b11010101 || PORTD==0b11010100)
     f1a:	82 b3       	in	r24, 0x12	; 18
     f1c:	86 3d       	cpi	r24, 0xD6	; 214
     f1e:	61 f0       	breq	.+24     	; 0xf38 <main+0x1cc>
     f20:	82 b3       	in	r24, 0x12	; 18
     f22:	85 3d       	cpi	r24, 0xD5	; 213
     f24:	49 f0       	breq	.+18     	; 0xf38 <main+0x1cc>
     f26:	82 b3       	in	r24, 0x12	; 18
     f28:	84 3d       	cpi	r24, 0xD4	; 212
     f2a:	59 f4       	brne	.+22     	; 0xf42 <main+0x1d6>
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <main+0x1cc>
					{
						while(key=='+' || key=='\0')
							{key = keypad_scan(); DCcurrent();}
     f2e:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     f32:	c8 2f       	mov	r28, r24
     f34:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DCcurrent>
				break;
				case '+':				//DC
				{
					if(PORTD==0b11010110 || PORTD==0b11010101 || PORTD==0b11010100)
					{
						while(key=='+' || key=='\0')
     f38:	cb 32       	cpi	r28, 0x2B	; 43
     f3a:	c9 f3       	breq	.-14     	; 0xf2e <main+0x1c2>
     f3c:	cc 23       	and	r28, r28
     f3e:	b9 f3       	breq	.-18     	; 0xf2e <main+0x1c2>
     f40:	2f c0       	rjmp	.+94     	; 0xfa0 <main+0x234>
							{key = keypad_scan(); DCcurrent();}
					}
					else if(PORTD==0b11001011)
     f42:	82 b3       	in	r24, 0x12	; 18
     f44:	8b 3c       	cpi	r24, 0xCB	; 203
     f46:	61 f5       	brne	.+88     	; 0xfa0 <main+0x234>
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <main+0x1e8>
					{
						while(key=='+' || key=='\0')
							{key = keypad_scan(); DCvoltage();}
     f4a:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     f4e:	c8 2f       	mov	r28, r24
     f50:	0e 94 a8 03 	call	0x750	; 0x750 <DCvoltage>
						while(key=='+' || key=='\0')
							{key = keypad_scan(); DCcurrent();}
					}
					else if(PORTD==0b11001011)
					{
						while(key=='+' || key=='\0')
     f54:	cb 32       	cpi	r28, 0x2B	; 43
     f56:	c9 f3       	breq	.-14     	; 0xf4a <main+0x1de>
     f58:	cc 23       	and	r28, r28
     f5a:	b9 f3       	breq	.-18     	; 0xf4a <main+0x1de>
     f5c:	21 c0       	rjmp	.+66     	; 0xfa0 <main+0x234>
					}
				}
				break;
				case '-':				//AC
				{
					if(PORTD==0b11010110 || PORTD==0b11010101 || PORTD==0b11010100)
     f5e:	82 b3       	in	r24, 0x12	; 18
     f60:	86 3d       	cpi	r24, 0xD6	; 214
     f62:	61 f0       	breq	.+24     	; 0xf7c <main+0x210>
     f64:	82 b3       	in	r24, 0x12	; 18
     f66:	85 3d       	cpi	r24, 0xD5	; 213
     f68:	49 f0       	breq	.+18     	; 0xf7c <main+0x210>
     f6a:	82 b3       	in	r24, 0x12	; 18
     f6c:	84 3d       	cpi	r24, 0xD4	; 212
     f6e:	59 f4       	brne	.+22     	; 0xf86 <main+0x21a>
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <main+0x210>
					{
						while(key=='-' || key=='\0')
							{key = keypad_scan(); ACcurrent();}
     f72:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     f76:	c8 2f       	mov	r28, r24
     f78:	0e 94 aa 01 	call	0x354	; 0x354 <ACcurrent>
				break;
				case '-':				//AC
				{
					if(PORTD==0b11010110 || PORTD==0b11010101 || PORTD==0b11010100)
					{
						while(key=='-' || key=='\0')
     f7c:	cd 32       	cpi	r28, 0x2D	; 45
     f7e:	c9 f3       	breq	.-14     	; 0xf72 <main+0x206>
     f80:	cc 23       	and	r28, r28
     f82:	b9 f3       	breq	.-18     	; 0xf72 <main+0x206>
     f84:	0d c0       	rjmp	.+26     	; 0xfa0 <main+0x234>
							{key = keypad_scan(); ACcurrent();}
					}
					else if(PORTD==0b11001011)
     f86:	82 b3       	in	r24, 0x12	; 18
     f88:	8b 3c       	cpi	r24, 0xCB	; 203
     f8a:	51 f4       	brne	.+20     	; 0xfa0 <main+0x234>
     f8c:	05 c0       	rjmp	.+10     	; 0xf98 <main+0x22c>
					{
						while(key=='-' || key=='\0')
							{key = keypad_scan(); ACvoltage();}
     f8e:	0e 94 0c 06 	call	0xc18	; 0xc18 <keypad_scan>
     f92:	c8 2f       	mov	r28, r24
     f94:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <ACvoltage>
						while(key=='-' || key=='\0')
							{key = keypad_scan(); ACcurrent();}
					}
					else if(PORTD==0b11001011)
					{
						while(key=='-' || key=='\0')
     f98:	cd 32       	cpi	r28, 0x2D	; 45
     f9a:	c9 f3       	breq	.-14     	; 0xf8e <main+0x222>
     f9c:	cc 23       	and	r28, r28
     f9e:	b9 f3       	breq	.-18     	; 0xf8e <main+0x222>
     fa0:	9f e7       	ldi	r25, 0x7F	; 127
     fa2:	28 e3       	ldi	r18, 0x38	; 56
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	91 50       	subi	r25, 0x01	; 1
     fa8:	20 40       	sbci	r18, 0x00	; 0
     faa:	80 40       	sbci	r24, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <main+0x23a>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <main+0x244>
     fb0:	00 00       	nop
     fb2:	ef ce       	rjmp	.-546    	; 0xd92 <main+0x26>

00000fb4 <__subsf3>:
     fb4:	50 58       	subi	r21, 0x80	; 128

00000fb6 <__addsf3>:
     fb6:	bb 27       	eor	r27, r27
     fb8:	aa 27       	eor	r26, r26
     fba:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__addsf3x>
     fbe:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_round>
     fc2:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_pscA>
     fc6:	38 f0       	brcs	.+14     	; 0xfd6 <__addsf3+0x20>
     fc8:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_pscB>
     fcc:	20 f0       	brcs	.+8      	; 0xfd6 <__addsf3+0x20>
     fce:	39 f4       	brne	.+14     	; 0xfde <__addsf3+0x28>
     fd0:	9f 3f       	cpi	r25, 0xFF	; 255
     fd2:	19 f4       	brne	.+6      	; 0xfda <__addsf3+0x24>
     fd4:	26 f4       	brtc	.+8      	; 0xfde <__addsf3+0x28>
     fd6:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_nan>
     fda:	0e f4       	brtc	.+2      	; 0xfde <__addsf3+0x28>
     fdc:	e0 95       	com	r30
     fde:	e7 fb       	bst	r30, 7
     fe0:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_inf>

00000fe4 <__addsf3x>:
     fe4:	e9 2f       	mov	r30, r25
     fe6:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_split3>
     fea:	58 f3       	brcs	.-42     	; 0xfc2 <__addsf3+0xc>
     fec:	ba 17       	cp	r27, r26
     fee:	62 07       	cpc	r22, r18
     ff0:	73 07       	cpc	r23, r19
     ff2:	84 07       	cpc	r24, r20
     ff4:	95 07       	cpc	r25, r21
     ff6:	20 f0       	brcs	.+8      	; 0x1000 <__addsf3x+0x1c>
     ff8:	79 f4       	brne	.+30     	; 0x1018 <__addsf3x+0x34>
     ffa:	a6 f5       	brtc	.+104    	; 0x1064 <__addsf3x+0x80>
     ffc:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__fp_zero>
    1000:	0e f4       	brtc	.+2      	; 0x1004 <__addsf3x+0x20>
    1002:	e0 95       	com	r30
    1004:	0b 2e       	mov	r0, r27
    1006:	ba 2f       	mov	r27, r26
    1008:	a0 2d       	mov	r26, r0
    100a:	0b 01       	movw	r0, r22
    100c:	b9 01       	movw	r22, r18
    100e:	90 01       	movw	r18, r0
    1010:	0c 01       	movw	r0, r24
    1012:	ca 01       	movw	r24, r20
    1014:	a0 01       	movw	r20, r0
    1016:	11 24       	eor	r1, r1
    1018:	ff 27       	eor	r31, r31
    101a:	59 1b       	sub	r21, r25
    101c:	99 f0       	breq	.+38     	; 0x1044 <__addsf3x+0x60>
    101e:	59 3f       	cpi	r21, 0xF9	; 249
    1020:	50 f4       	brcc	.+20     	; 0x1036 <__addsf3x+0x52>
    1022:	50 3e       	cpi	r21, 0xE0	; 224
    1024:	68 f1       	brcs	.+90     	; 0x1080 <__addsf3x+0x9c>
    1026:	1a 16       	cp	r1, r26
    1028:	f0 40       	sbci	r31, 0x00	; 0
    102a:	a2 2f       	mov	r26, r18
    102c:	23 2f       	mov	r18, r19
    102e:	34 2f       	mov	r19, r20
    1030:	44 27       	eor	r20, r20
    1032:	58 5f       	subi	r21, 0xF8	; 248
    1034:	f3 cf       	rjmp	.-26     	; 0x101c <__addsf3x+0x38>
    1036:	46 95       	lsr	r20
    1038:	37 95       	ror	r19
    103a:	27 95       	ror	r18
    103c:	a7 95       	ror	r26
    103e:	f0 40       	sbci	r31, 0x00	; 0
    1040:	53 95       	inc	r21
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__addsf3x+0x52>
    1044:	7e f4       	brtc	.+30     	; 0x1064 <__addsf3x+0x80>
    1046:	1f 16       	cp	r1, r31
    1048:	ba 0b       	sbc	r27, r26
    104a:	62 0b       	sbc	r22, r18
    104c:	73 0b       	sbc	r23, r19
    104e:	84 0b       	sbc	r24, r20
    1050:	ba f0       	brmi	.+46     	; 0x1080 <__addsf3x+0x9c>
    1052:	91 50       	subi	r25, 0x01	; 1
    1054:	a1 f0       	breq	.+40     	; 0x107e <__addsf3x+0x9a>
    1056:	ff 0f       	add	r31, r31
    1058:	bb 1f       	adc	r27, r27
    105a:	66 1f       	adc	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	c2 f7       	brpl	.-16     	; 0x1052 <__addsf3x+0x6e>
    1062:	0e c0       	rjmp	.+28     	; 0x1080 <__addsf3x+0x9c>
    1064:	ba 0f       	add	r27, r26
    1066:	62 1f       	adc	r22, r18
    1068:	73 1f       	adc	r23, r19
    106a:	84 1f       	adc	r24, r20
    106c:	48 f4       	brcc	.+18     	; 0x1080 <__addsf3x+0x9c>
    106e:	87 95       	ror	r24
    1070:	77 95       	ror	r23
    1072:	67 95       	ror	r22
    1074:	b7 95       	ror	r27
    1076:	f7 95       	ror	r31
    1078:	9e 3f       	cpi	r25, 0xFE	; 254
    107a:	08 f0       	brcs	.+2      	; 0x107e <__addsf3x+0x9a>
    107c:	b0 cf       	rjmp	.-160    	; 0xfde <__addsf3+0x28>
    107e:	93 95       	inc	r25
    1080:	88 0f       	add	r24, r24
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__addsf3x+0xa2>
    1084:	99 27       	eor	r25, r25
    1086:	ee 0f       	add	r30, r30
    1088:	97 95       	ror	r25
    108a:	87 95       	ror	r24
    108c:	08 95       	ret

0000108e <__cmpsf2>:
    108e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_cmp>
    1092:	08 f4       	brcc	.+2      	; 0x1096 <__cmpsf2+0x8>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	08 95       	ret

00001098 <__divsf3>:
    1098:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divsf3x>
    109c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_round>
    10a0:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_pscB>
    10a4:	58 f0       	brcs	.+22     	; 0x10bc <__divsf3+0x24>
    10a6:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_pscA>
    10aa:	40 f0       	brcs	.+16     	; 0x10bc <__divsf3+0x24>
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <__divsf3+0x20>
    10ae:	5f 3f       	cpi	r21, 0xFF	; 255
    10b0:	29 f0       	breq	.+10     	; 0x10bc <__divsf3+0x24>
    10b2:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_inf>
    10b6:	51 11       	cpse	r21, r1
    10b8:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_szero>
    10bc:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_nan>

000010c0 <__divsf3x>:
    10c0:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_split3>
    10c4:	68 f3       	brcs	.-38     	; 0x10a0 <__divsf3+0x8>

000010c6 <__divsf3_pse>:
    10c6:	99 23       	and	r25, r25
    10c8:	b1 f3       	breq	.-20     	; 0x10b6 <__divsf3+0x1e>
    10ca:	55 23       	and	r21, r21
    10cc:	91 f3       	breq	.-28     	; 0x10b2 <__divsf3+0x1a>
    10ce:	95 1b       	sub	r25, r21
    10d0:	55 0b       	sbc	r21, r21
    10d2:	bb 27       	eor	r27, r27
    10d4:	aa 27       	eor	r26, r26
    10d6:	62 17       	cp	r22, r18
    10d8:	73 07       	cpc	r23, r19
    10da:	84 07       	cpc	r24, r20
    10dc:	38 f0       	brcs	.+14     	; 0x10ec <__divsf3_pse+0x26>
    10de:	9f 5f       	subi	r25, 0xFF	; 255
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	22 0f       	add	r18, r18
    10e4:	33 1f       	adc	r19, r19
    10e6:	44 1f       	adc	r20, r20
    10e8:	aa 1f       	adc	r26, r26
    10ea:	a9 f3       	breq	.-22     	; 0x10d6 <__divsf3_pse+0x10>
    10ec:	35 d0       	rcall	.+106    	; 0x1158 <__divsf3_pse+0x92>
    10ee:	0e 2e       	mov	r0, r30
    10f0:	3a f0       	brmi	.+14     	; 0x1100 <__divsf3_pse+0x3a>
    10f2:	e0 e8       	ldi	r30, 0x80	; 128
    10f4:	32 d0       	rcall	.+100    	; 0x115a <__divsf3_pse+0x94>
    10f6:	91 50       	subi	r25, 0x01	; 1
    10f8:	50 40       	sbci	r21, 0x00	; 0
    10fa:	e6 95       	lsr	r30
    10fc:	00 1c       	adc	r0, r0
    10fe:	ca f7       	brpl	.-14     	; 0x10f2 <__divsf3_pse+0x2c>
    1100:	2b d0       	rcall	.+86     	; 0x1158 <__divsf3_pse+0x92>
    1102:	fe 2f       	mov	r31, r30
    1104:	29 d0       	rcall	.+82     	; 0x1158 <__divsf3_pse+0x92>
    1106:	66 0f       	add	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	bb 1f       	adc	r27, r27
    110e:	26 17       	cp	r18, r22
    1110:	37 07       	cpc	r19, r23
    1112:	48 07       	cpc	r20, r24
    1114:	ab 07       	cpc	r26, r27
    1116:	b0 e8       	ldi	r27, 0x80	; 128
    1118:	09 f0       	breq	.+2      	; 0x111c <__divsf3_pse+0x56>
    111a:	bb 0b       	sbc	r27, r27
    111c:	80 2d       	mov	r24, r0
    111e:	bf 01       	movw	r22, r30
    1120:	ff 27       	eor	r31, r31
    1122:	93 58       	subi	r25, 0x83	; 131
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	3a f0       	brmi	.+14     	; 0x1136 <__divsf3_pse+0x70>
    1128:	9e 3f       	cpi	r25, 0xFE	; 254
    112a:	51 05       	cpc	r21, r1
    112c:	78 f0       	brcs	.+30     	; 0x114c <__divsf3_pse+0x86>
    112e:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_inf>
    1132:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_szero>
    1136:	5f 3f       	cpi	r21, 0xFF	; 255
    1138:	e4 f3       	brlt	.-8      	; 0x1132 <__divsf3_pse+0x6c>
    113a:	98 3e       	cpi	r25, 0xE8	; 232
    113c:	d4 f3       	brlt	.-12     	; 0x1132 <__divsf3_pse+0x6c>
    113e:	86 95       	lsr	r24
    1140:	77 95       	ror	r23
    1142:	67 95       	ror	r22
    1144:	b7 95       	ror	r27
    1146:	f7 95       	ror	r31
    1148:	9f 5f       	subi	r25, 0xFF	; 255
    114a:	c9 f7       	brne	.-14     	; 0x113e <__divsf3_pse+0x78>
    114c:	88 0f       	add	r24, r24
    114e:	91 1d       	adc	r25, r1
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	97 f9       	bld	r25, 7
    1156:	08 95       	ret
    1158:	e1 e0       	ldi	r30, 0x01	; 1
    115a:	66 0f       	add	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	bb 1f       	adc	r27, r27
    1162:	62 17       	cp	r22, r18
    1164:	73 07       	cpc	r23, r19
    1166:	84 07       	cpc	r24, r20
    1168:	ba 07       	cpc	r27, r26
    116a:	20 f0       	brcs	.+8      	; 0x1174 <__divsf3_pse+0xae>
    116c:	62 1b       	sub	r22, r18
    116e:	73 0b       	sbc	r23, r19
    1170:	84 0b       	sbc	r24, r20
    1172:	ba 0b       	sbc	r27, r26
    1174:	ee 1f       	adc	r30, r30
    1176:	88 f7       	brcc	.-30     	; 0x115a <__divsf3_pse+0x94>
    1178:	e0 95       	com	r30
    117a:	08 95       	ret

0000117c <__floatunsisf>:
    117c:	e8 94       	clt
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <__floatsisf+0x12>

00001180 <__floatsisf>:
    1180:	97 fb       	bst	r25, 7
    1182:	3e f4       	brtc	.+14     	; 0x1192 <__floatsisf+0x12>
    1184:	90 95       	com	r25
    1186:	80 95       	com	r24
    1188:	70 95       	com	r23
    118a:	61 95       	neg	r22
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	8f 4f       	sbci	r24, 0xFF	; 255
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	99 23       	and	r25, r25
    1194:	a9 f0       	breq	.+42     	; 0x11c0 <__floatsisf+0x40>
    1196:	f9 2f       	mov	r31, r25
    1198:	96 e9       	ldi	r25, 0x96	; 150
    119a:	bb 27       	eor	r27, r27
    119c:	93 95       	inc	r25
    119e:	f6 95       	lsr	r31
    11a0:	87 95       	ror	r24
    11a2:	77 95       	ror	r23
    11a4:	67 95       	ror	r22
    11a6:	b7 95       	ror	r27
    11a8:	f1 11       	cpse	r31, r1
    11aa:	f8 cf       	rjmp	.-16     	; 0x119c <__floatsisf+0x1c>
    11ac:	fa f4       	brpl	.+62     	; 0x11ec <__floatsisf+0x6c>
    11ae:	bb 0f       	add	r27, r27
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <__floatsisf+0x36>
    11b2:	60 ff       	sbrs	r22, 0
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <__floatsisf+0x6c>
    11b6:	6f 5f       	subi	r22, 0xFF	; 255
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	8f 4f       	sbci	r24, 0xFF	; 255
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	16 c0       	rjmp	.+44     	; 0x11ec <__floatsisf+0x6c>
    11c0:	88 23       	and	r24, r24
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <__floatsisf+0x48>
    11c4:	96 e9       	ldi	r25, 0x96	; 150
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <__floatsisf+0x6a>
    11c8:	77 23       	and	r23, r23
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <__floatsisf+0x54>
    11cc:	9e e8       	ldi	r25, 0x8E	; 142
    11ce:	87 2f       	mov	r24, r23
    11d0:	76 2f       	mov	r23, r22
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <__floatsisf+0x5e>
    11d4:	66 23       	and	r22, r22
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <__floatsisf+0x74>
    11d8:	96 e8       	ldi	r25, 0x86	; 134
    11da:	86 2f       	mov	r24, r22
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	2a f0       	brmi	.+10     	; 0x11ec <__floatsisf+0x6c>
    11e2:	9a 95       	dec	r25
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	da f7       	brpl	.-10     	; 0x11e2 <__floatsisf+0x62>
    11ec:	88 0f       	add	r24, r24
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	97 f9       	bld	r25, 7
    11f4:	08 95       	ret

000011f6 <__fp_cmp>:
    11f6:	99 0f       	add	r25, r25
    11f8:	00 08       	sbc	r0, r0
    11fa:	55 0f       	add	r21, r21
    11fc:	aa 0b       	sbc	r26, r26
    11fe:	e0 e8       	ldi	r30, 0x80	; 128
    1200:	fe ef       	ldi	r31, 0xFE	; 254
    1202:	16 16       	cp	r1, r22
    1204:	17 06       	cpc	r1, r23
    1206:	e8 07       	cpc	r30, r24
    1208:	f9 07       	cpc	r31, r25
    120a:	c0 f0       	brcs	.+48     	; 0x123c <__fp_cmp+0x46>
    120c:	12 16       	cp	r1, r18
    120e:	13 06       	cpc	r1, r19
    1210:	e4 07       	cpc	r30, r20
    1212:	f5 07       	cpc	r31, r21
    1214:	98 f0       	brcs	.+38     	; 0x123c <__fp_cmp+0x46>
    1216:	62 1b       	sub	r22, r18
    1218:	73 0b       	sbc	r23, r19
    121a:	84 0b       	sbc	r24, r20
    121c:	95 0b       	sbc	r25, r21
    121e:	39 f4       	brne	.+14     	; 0x122e <__fp_cmp+0x38>
    1220:	0a 26       	eor	r0, r26
    1222:	61 f0       	breq	.+24     	; 0x123c <__fp_cmp+0x46>
    1224:	23 2b       	or	r18, r19
    1226:	24 2b       	or	r18, r20
    1228:	25 2b       	or	r18, r21
    122a:	21 f4       	brne	.+8      	; 0x1234 <__fp_cmp+0x3e>
    122c:	08 95       	ret
    122e:	0a 26       	eor	r0, r26
    1230:	09 f4       	brne	.+2      	; 0x1234 <__fp_cmp+0x3e>
    1232:	a1 40       	sbci	r26, 0x01	; 1
    1234:	a6 95       	lsr	r26
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	81 1d       	adc	r24, r1
    123a:	81 1d       	adc	r24, r1
    123c:	08 95       	ret

0000123e <__fp_inf>:
    123e:	97 f9       	bld	r25, 7
    1240:	9f 67       	ori	r25, 0x7F	; 127
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	08 95       	ret

0000124a <__fp_nan>:
    124a:	9f ef       	ldi	r25, 0xFF	; 255
    124c:	80 ec       	ldi	r24, 0xC0	; 192
    124e:	08 95       	ret

00001250 <__fp_pscA>:
    1250:	00 24       	eor	r0, r0
    1252:	0a 94       	dec	r0
    1254:	16 16       	cp	r1, r22
    1256:	17 06       	cpc	r1, r23
    1258:	18 06       	cpc	r1, r24
    125a:	09 06       	cpc	r0, r25
    125c:	08 95       	ret

0000125e <__fp_pscB>:
    125e:	00 24       	eor	r0, r0
    1260:	0a 94       	dec	r0
    1262:	12 16       	cp	r1, r18
    1264:	13 06       	cpc	r1, r19
    1266:	14 06       	cpc	r1, r20
    1268:	05 06       	cpc	r0, r21
    126a:	08 95       	ret

0000126c <__fp_round>:
    126c:	09 2e       	mov	r0, r25
    126e:	03 94       	inc	r0
    1270:	00 0c       	add	r0, r0
    1272:	11 f4       	brne	.+4      	; 0x1278 <__fp_round+0xc>
    1274:	88 23       	and	r24, r24
    1276:	52 f0       	brmi	.+20     	; 0x128c <__fp_round+0x20>
    1278:	bb 0f       	add	r27, r27
    127a:	40 f4       	brcc	.+16     	; 0x128c <__fp_round+0x20>
    127c:	bf 2b       	or	r27, r31
    127e:	11 f4       	brne	.+4      	; 0x1284 <__fp_round+0x18>
    1280:	60 ff       	sbrs	r22, 0
    1282:	04 c0       	rjmp	.+8      	; 0x128c <__fp_round+0x20>
    1284:	6f 5f       	subi	r22, 0xFF	; 255
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	08 95       	ret

0000128e <__fp_split3>:
    128e:	57 fd       	sbrc	r21, 7
    1290:	90 58       	subi	r25, 0x80	; 128
    1292:	44 0f       	add	r20, r20
    1294:	55 1f       	adc	r21, r21
    1296:	59 f0       	breq	.+22     	; 0x12ae <__fp_splitA+0x10>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	71 f0       	breq	.+28     	; 0x12b8 <__fp_splitA+0x1a>
    129c:	47 95       	ror	r20

0000129e <__fp_splitA>:
    129e:	88 0f       	add	r24, r24
    12a0:	97 fb       	bst	r25, 7
    12a2:	99 1f       	adc	r25, r25
    12a4:	61 f0       	breq	.+24     	; 0x12be <__fp_splitA+0x20>
    12a6:	9f 3f       	cpi	r25, 0xFF	; 255
    12a8:	79 f0       	breq	.+30     	; 0x12c8 <__fp_splitA+0x2a>
    12aa:	87 95       	ror	r24
    12ac:	08 95       	ret
    12ae:	12 16       	cp	r1, r18
    12b0:	13 06       	cpc	r1, r19
    12b2:	14 06       	cpc	r1, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	f2 cf       	rjmp	.-28     	; 0x129c <__fp_split3+0xe>
    12b8:	46 95       	lsr	r20
    12ba:	f1 df       	rcall	.-30     	; 0x129e <__fp_splitA>
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <__fp_splitA+0x30>
    12be:	16 16       	cp	r1, r22
    12c0:	17 06       	cpc	r1, r23
    12c2:	18 06       	cpc	r1, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	f1 cf       	rjmp	.-30     	; 0x12aa <__fp_splitA+0xc>
    12c8:	86 95       	lsr	r24
    12ca:	71 05       	cpc	r23, r1
    12cc:	61 05       	cpc	r22, r1
    12ce:	08 94       	sec
    12d0:	08 95       	ret

000012d2 <__fp_zero>:
    12d2:	e8 94       	clt

000012d4 <__fp_szero>:
    12d4:	bb 27       	eor	r27, r27
    12d6:	66 27       	eor	r22, r22
    12d8:	77 27       	eor	r23, r23
    12da:	cb 01       	movw	r24, r22
    12dc:	97 f9       	bld	r25, 7
    12de:	08 95       	ret

000012e0 <__gesf2>:
    12e0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_cmp>
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <__gesf2+0x8>
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__mulsf3>:
    12ea:	0e 94 88 09 	call	0x1310	; 0x1310 <__mulsf3x>
    12ee:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_round>
    12f2:	0e 94 28 09 	call	0x1250	; 0x1250 <__fp_pscA>
    12f6:	38 f0       	brcs	.+14     	; 0x1306 <__mulsf3+0x1c>
    12f8:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_pscB>
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__mulsf3+0x1c>
    12fe:	95 23       	and	r25, r21
    1300:	11 f0       	breq	.+4      	; 0x1306 <__mulsf3+0x1c>
    1302:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_inf>
    1306:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_nan>
    130a:	11 24       	eor	r1, r1
    130c:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_szero>

00001310 <__mulsf3x>:
    1310:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_split3>
    1314:	70 f3       	brcs	.-36     	; 0x12f2 <__mulsf3+0x8>

00001316 <__mulsf3_pse>:
    1316:	95 9f       	mul	r25, r21
    1318:	c1 f3       	breq	.-16     	; 0x130a <__mulsf3+0x20>
    131a:	95 0f       	add	r25, r21
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	55 1f       	adc	r21, r21
    1320:	62 9f       	mul	r22, r18
    1322:	f0 01       	movw	r30, r0
    1324:	72 9f       	mul	r23, r18
    1326:	bb 27       	eor	r27, r27
    1328:	f0 0d       	add	r31, r0
    132a:	b1 1d       	adc	r27, r1
    132c:	63 9f       	mul	r22, r19
    132e:	aa 27       	eor	r26, r26
    1330:	f0 0d       	add	r31, r0
    1332:	b1 1d       	adc	r27, r1
    1334:	aa 1f       	adc	r26, r26
    1336:	64 9f       	mul	r22, r20
    1338:	66 27       	eor	r22, r22
    133a:	b0 0d       	add	r27, r0
    133c:	a1 1d       	adc	r26, r1
    133e:	66 1f       	adc	r22, r22
    1340:	82 9f       	mul	r24, r18
    1342:	22 27       	eor	r18, r18
    1344:	b0 0d       	add	r27, r0
    1346:	a1 1d       	adc	r26, r1
    1348:	62 1f       	adc	r22, r18
    134a:	73 9f       	mul	r23, r19
    134c:	b0 0d       	add	r27, r0
    134e:	a1 1d       	adc	r26, r1
    1350:	62 1f       	adc	r22, r18
    1352:	83 9f       	mul	r24, r19
    1354:	a0 0d       	add	r26, r0
    1356:	61 1d       	adc	r22, r1
    1358:	22 1f       	adc	r18, r18
    135a:	74 9f       	mul	r23, r20
    135c:	33 27       	eor	r19, r19
    135e:	a0 0d       	add	r26, r0
    1360:	61 1d       	adc	r22, r1
    1362:	23 1f       	adc	r18, r19
    1364:	84 9f       	mul	r24, r20
    1366:	60 0d       	add	r22, r0
    1368:	21 1d       	adc	r18, r1
    136a:	82 2f       	mov	r24, r18
    136c:	76 2f       	mov	r23, r22
    136e:	6a 2f       	mov	r22, r26
    1370:	11 24       	eor	r1, r1
    1372:	9f 57       	subi	r25, 0x7F	; 127
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	9a f0       	brmi	.+38     	; 0x139e <__mulsf3_pse+0x88>
    1378:	f1 f0       	breq	.+60     	; 0x13b6 <__mulsf3_pse+0xa0>
    137a:	88 23       	and	r24, r24
    137c:	4a f0       	brmi	.+18     	; 0x1390 <__mulsf3_pse+0x7a>
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	bb 1f       	adc	r27, r27
    1384:	66 1f       	adc	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	88 1f       	adc	r24, r24
    138a:	91 50       	subi	r25, 0x01	; 1
    138c:	50 40       	sbci	r21, 0x00	; 0
    138e:	a9 f7       	brne	.-22     	; 0x137a <__mulsf3_pse+0x64>
    1390:	9e 3f       	cpi	r25, 0xFE	; 254
    1392:	51 05       	cpc	r21, r1
    1394:	80 f0       	brcs	.+32     	; 0x13b6 <__mulsf3_pse+0xa0>
    1396:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_inf>
    139a:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <__fp_szero>
    139e:	5f 3f       	cpi	r21, 0xFF	; 255
    13a0:	e4 f3       	brlt	.-8      	; 0x139a <__mulsf3_pse+0x84>
    13a2:	98 3e       	cpi	r25, 0xE8	; 232
    13a4:	d4 f3       	brlt	.-12     	; 0x139a <__mulsf3_pse+0x84>
    13a6:	86 95       	lsr	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b7 95       	ror	r27
    13ae:	f7 95       	ror	r31
    13b0:	e7 95       	ror	r30
    13b2:	9f 5f       	subi	r25, 0xFF	; 255
    13b4:	c1 f7       	brne	.-16     	; 0x13a6 <__mulsf3_pse+0x90>
    13b6:	fe 2b       	or	r31, r30
    13b8:	88 0f       	add	r24, r24
    13ba:	91 1d       	adc	r25, r1
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	97 f9       	bld	r25, 7
    13c2:	08 95       	ret

000013c4 <vfprintf>:
    13c4:	a0 e1       	ldi	r26, 0x10	; 16
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 ee       	ldi	r30, 0xE8	; 232
    13ca:	f9 e0       	ldi	r31, 0x09	; 9
    13cc:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__prologue_saves__>
    13d0:	7c 01       	movw	r14, r24
    13d2:	1b 01       	movw	r2, r22
    13d4:	6a 01       	movw	r12, r20
    13d6:	fc 01       	movw	r30, r24
    13d8:	17 82       	std	Z+7, r1	; 0x07
    13da:	16 82       	std	Z+6, r1	; 0x06
    13dc:	83 81       	ldd	r24, Z+3	; 0x03
    13de:	81 ff       	sbrs	r24, 1
    13e0:	44 c3       	rjmp	.+1672   	; 0x1a6a <vfprintf+0x6a6>
    13e2:	9e 01       	movw	r18, r28
    13e4:	2f 5f       	subi	r18, 0xFF	; 255
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	39 01       	movw	r6, r18
    13ea:	f7 01       	movw	r30, r14
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	f1 01       	movw	r30, r2
    13f0:	93 fd       	sbrc	r25, 3
    13f2:	85 91       	lpm	r24, Z+
    13f4:	93 ff       	sbrs	r25, 3
    13f6:	81 91       	ld	r24, Z+
    13f8:	1f 01       	movw	r2, r30
    13fa:	88 23       	and	r24, r24
    13fc:	09 f4       	brne	.+2      	; 0x1400 <vfprintf+0x3c>
    13fe:	31 c3       	rjmp	.+1634   	; 0x1a62 <vfprintf+0x69e>
    1400:	85 32       	cpi	r24, 0x25	; 37
    1402:	39 f4       	brne	.+14     	; 0x1412 <vfprintf+0x4e>
    1404:	93 fd       	sbrc	r25, 3
    1406:	85 91       	lpm	r24, Z+
    1408:	93 ff       	sbrs	r25, 3
    140a:	81 91       	ld	r24, Z+
    140c:	1f 01       	movw	r2, r30
    140e:	85 32       	cpi	r24, 0x25	; 37
    1410:	39 f4       	brne	.+14     	; 0x1420 <vfprintf+0x5c>
    1412:	b7 01       	movw	r22, r14
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    141a:	56 01       	movw	r10, r12
    141c:	65 01       	movw	r12, r10
    141e:	e5 cf       	rjmp	.-54     	; 0x13ea <vfprintf+0x26>
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	51 2c       	mov	r5, r1
    1424:	91 2c       	mov	r9, r1
    1426:	ff e1       	ldi	r31, 0x1F	; 31
    1428:	f9 15       	cp	r31, r9
    142a:	d8 f0       	brcs	.+54     	; 0x1462 <vfprintf+0x9e>
    142c:	8b 32       	cpi	r24, 0x2B	; 43
    142e:	79 f0       	breq	.+30     	; 0x144e <vfprintf+0x8a>
    1430:	38 f4       	brcc	.+14     	; 0x1440 <vfprintf+0x7c>
    1432:	80 32       	cpi	r24, 0x20	; 32
    1434:	79 f0       	breq	.+30     	; 0x1454 <vfprintf+0x90>
    1436:	83 32       	cpi	r24, 0x23	; 35
    1438:	a1 f4       	brne	.+40     	; 0x1462 <vfprintf+0x9e>
    143a:	f9 2d       	mov	r31, r9
    143c:	f0 61       	ori	r31, 0x10	; 16
    143e:	2e c0       	rjmp	.+92     	; 0x149c <vfprintf+0xd8>
    1440:	8d 32       	cpi	r24, 0x2D	; 45
    1442:	61 f0       	breq	.+24     	; 0x145c <vfprintf+0x98>
    1444:	80 33       	cpi	r24, 0x30	; 48
    1446:	69 f4       	brne	.+26     	; 0x1462 <vfprintf+0x9e>
    1448:	29 2d       	mov	r18, r9
    144a:	21 60       	ori	r18, 0x01	; 1
    144c:	2d c0       	rjmp	.+90     	; 0x14a8 <vfprintf+0xe4>
    144e:	39 2d       	mov	r19, r9
    1450:	32 60       	ori	r19, 0x02	; 2
    1452:	93 2e       	mov	r9, r19
    1454:	89 2d       	mov	r24, r9
    1456:	84 60       	ori	r24, 0x04	; 4
    1458:	98 2e       	mov	r9, r24
    145a:	2a c0       	rjmp	.+84     	; 0x14b0 <vfprintf+0xec>
    145c:	e9 2d       	mov	r30, r9
    145e:	e8 60       	ori	r30, 0x08	; 8
    1460:	15 c0       	rjmp	.+42     	; 0x148c <vfprintf+0xc8>
    1462:	97 fc       	sbrc	r9, 7
    1464:	2d c0       	rjmp	.+90     	; 0x14c0 <vfprintf+0xfc>
    1466:	20 ed       	ldi	r18, 0xD0	; 208
    1468:	28 0f       	add	r18, r24
    146a:	2a 30       	cpi	r18, 0x0A	; 10
    146c:	88 f4       	brcc	.+34     	; 0x1490 <vfprintf+0xcc>
    146e:	96 fe       	sbrs	r9, 6
    1470:	06 c0       	rjmp	.+12     	; 0x147e <vfprintf+0xba>
    1472:	3a e0       	ldi	r19, 0x0A	; 10
    1474:	13 9f       	mul	r17, r19
    1476:	20 0d       	add	r18, r0
    1478:	11 24       	eor	r1, r1
    147a:	12 2f       	mov	r17, r18
    147c:	19 c0       	rjmp	.+50     	; 0x14b0 <vfprintf+0xec>
    147e:	8a e0       	ldi	r24, 0x0A	; 10
    1480:	58 9e       	mul	r5, r24
    1482:	20 0d       	add	r18, r0
    1484:	11 24       	eor	r1, r1
    1486:	52 2e       	mov	r5, r18
    1488:	e9 2d       	mov	r30, r9
    148a:	e0 62       	ori	r30, 0x20	; 32
    148c:	9e 2e       	mov	r9, r30
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <vfprintf+0xec>
    1490:	8e 32       	cpi	r24, 0x2E	; 46
    1492:	31 f4       	brne	.+12     	; 0x14a0 <vfprintf+0xdc>
    1494:	96 fc       	sbrc	r9, 6
    1496:	e5 c2       	rjmp	.+1482   	; 0x1a62 <vfprintf+0x69e>
    1498:	f9 2d       	mov	r31, r9
    149a:	f0 64       	ori	r31, 0x40	; 64
    149c:	9f 2e       	mov	r9, r31
    149e:	08 c0       	rjmp	.+16     	; 0x14b0 <vfprintf+0xec>
    14a0:	8c 36       	cpi	r24, 0x6C	; 108
    14a2:	21 f4       	brne	.+8      	; 0x14ac <vfprintf+0xe8>
    14a4:	29 2d       	mov	r18, r9
    14a6:	20 68       	ori	r18, 0x80	; 128
    14a8:	92 2e       	mov	r9, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0xec>
    14ac:	88 36       	cpi	r24, 0x68	; 104
    14ae:	41 f4       	brne	.+16     	; 0x14c0 <vfprintf+0xfc>
    14b0:	f1 01       	movw	r30, r2
    14b2:	93 fd       	sbrc	r25, 3
    14b4:	85 91       	lpm	r24, Z+
    14b6:	93 ff       	sbrs	r25, 3
    14b8:	81 91       	ld	r24, Z+
    14ba:	1f 01       	movw	r2, r30
    14bc:	81 11       	cpse	r24, r1
    14be:	b3 cf       	rjmp	.-154    	; 0x1426 <vfprintf+0x62>
    14c0:	9b eb       	ldi	r25, 0xBB	; 187
    14c2:	98 0f       	add	r25, r24
    14c4:	93 30       	cpi	r25, 0x03	; 3
    14c6:	20 f4       	brcc	.+8      	; 0x14d0 <vfprintf+0x10c>
    14c8:	99 2d       	mov	r25, r9
    14ca:	90 61       	ori	r25, 0x10	; 16
    14cc:	80 5e       	subi	r24, 0xE0	; 224
    14ce:	07 c0       	rjmp	.+14     	; 0x14de <vfprintf+0x11a>
    14d0:	9b e9       	ldi	r25, 0x9B	; 155
    14d2:	98 0f       	add	r25, r24
    14d4:	93 30       	cpi	r25, 0x03	; 3
    14d6:	08 f0       	brcs	.+2      	; 0x14da <vfprintf+0x116>
    14d8:	66 c1       	rjmp	.+716    	; 0x17a6 <vfprintf+0x3e2>
    14da:	99 2d       	mov	r25, r9
    14dc:	9f 7e       	andi	r25, 0xEF	; 239
    14de:	96 ff       	sbrs	r25, 6
    14e0:	16 e0       	ldi	r17, 0x06	; 6
    14e2:	9f 73       	andi	r25, 0x3F	; 63
    14e4:	99 2e       	mov	r9, r25
    14e6:	85 36       	cpi	r24, 0x65	; 101
    14e8:	19 f4       	brne	.+6      	; 0x14f0 <vfprintf+0x12c>
    14ea:	90 64       	ori	r25, 0x40	; 64
    14ec:	99 2e       	mov	r9, r25
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <vfprintf+0x13c>
    14f0:	86 36       	cpi	r24, 0x66	; 102
    14f2:	21 f4       	brne	.+8      	; 0x14fc <vfprintf+0x138>
    14f4:	39 2f       	mov	r19, r25
    14f6:	30 68       	ori	r19, 0x80	; 128
    14f8:	93 2e       	mov	r9, r19
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <vfprintf+0x13c>
    14fc:	11 11       	cpse	r17, r1
    14fe:	11 50       	subi	r17, 0x01	; 1
    1500:	97 fe       	sbrs	r9, 7
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <vfprintf+0x14e>
    1504:	1c 33       	cpi	r17, 0x3C	; 60
    1506:	50 f4       	brcc	.+20     	; 0x151c <vfprintf+0x158>
    1508:	44 24       	eor	r4, r4
    150a:	43 94       	inc	r4
    150c:	41 0e       	add	r4, r17
    150e:	27 e0       	ldi	r18, 0x07	; 7
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <vfprintf+0x164>
    1512:	18 30       	cpi	r17, 0x08	; 8
    1514:	38 f0       	brcs	.+14     	; 0x1524 <vfprintf+0x160>
    1516:	27 e0       	ldi	r18, 0x07	; 7
    1518:	17 e0       	ldi	r17, 0x07	; 7
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <vfprintf+0x162>
    151c:	27 e0       	ldi	r18, 0x07	; 7
    151e:	9c e3       	ldi	r25, 0x3C	; 60
    1520:	49 2e       	mov	r4, r25
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x164>
    1524:	21 2f       	mov	r18, r17
    1526:	41 2c       	mov	r4, r1
    1528:	56 01       	movw	r10, r12
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	a8 0e       	add	r10, r24
    152e:	b1 1c       	adc	r11, r1
    1530:	f6 01       	movw	r30, r12
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	04 2d       	mov	r16, r4
    153c:	a3 01       	movw	r20, r6
    153e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__ftoa_engine>
    1542:	6c 01       	movw	r12, r24
    1544:	f9 81       	ldd	r31, Y+1	; 0x01
    1546:	fc 87       	std	Y+12, r31	; 0x0c
    1548:	f0 ff       	sbrs	r31, 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x18c>
    154c:	f3 ff       	sbrs	r31, 3
    154e:	06 c0       	rjmp	.+12     	; 0x155c <vfprintf+0x198>
    1550:	91 fc       	sbrc	r9, 1
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <vfprintf+0x19c>
    1554:	92 fe       	sbrs	r9, 2
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x1a0>
    1558:	00 e2       	ldi	r16, 0x20	; 32
    155a:	05 c0       	rjmp	.+10     	; 0x1566 <vfprintf+0x1a2>
    155c:	0d e2       	ldi	r16, 0x2D	; 45
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <vfprintf+0x1a2>
    1560:	0b e2       	ldi	r16, 0x2B	; 43
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <vfprintf+0x1a2>
    1564:	00 e0       	ldi	r16, 0x00	; 0
    1566:	8c 85       	ldd	r24, Y+12	; 0x0c
    1568:	8c 70       	andi	r24, 0x0C	; 12
    156a:	19 f0       	breq	.+6      	; 0x1572 <vfprintf+0x1ae>
    156c:	01 11       	cpse	r16, r1
    156e:	5a c2       	rjmp	.+1204   	; 0x1a24 <vfprintf+0x660>
    1570:	9b c2       	rjmp	.+1334   	; 0x1aa8 <vfprintf+0x6e4>
    1572:	97 fe       	sbrs	r9, 7
    1574:	10 c0       	rjmp	.+32     	; 0x1596 <vfprintf+0x1d2>
    1576:	4c 0c       	add	r4, r12
    1578:	fc 85       	ldd	r31, Y+12	; 0x0c
    157a:	f4 ff       	sbrs	r31, 4
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <vfprintf+0x1c2>
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	81 33       	cpi	r24, 0x31	; 49
    1582:	09 f4       	brne	.+2      	; 0x1586 <vfprintf+0x1c2>
    1584:	4a 94       	dec	r4
    1586:	14 14       	cp	r1, r4
    1588:	74 f5       	brge	.+92     	; 0x15e6 <vfprintf+0x222>
    158a:	28 e0       	ldi	r18, 0x08	; 8
    158c:	24 15       	cp	r18, r4
    158e:	78 f5       	brcc	.+94     	; 0x15ee <vfprintf+0x22a>
    1590:	88 e0       	ldi	r24, 0x08	; 8
    1592:	48 2e       	mov	r4, r24
    1594:	2c c0       	rjmp	.+88     	; 0x15ee <vfprintf+0x22a>
    1596:	96 fc       	sbrc	r9, 6
    1598:	2a c0       	rjmp	.+84     	; 0x15ee <vfprintf+0x22a>
    159a:	81 2f       	mov	r24, r17
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	8c 15       	cp	r24, r12
    15a0:	9d 05       	cpc	r25, r13
    15a2:	9c f0       	brlt	.+38     	; 0x15ca <vfprintf+0x206>
    15a4:	3c ef       	ldi	r19, 0xFC	; 252
    15a6:	c3 16       	cp	r12, r19
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	d3 06       	cpc	r13, r19
    15ac:	74 f0       	brlt	.+28     	; 0x15ca <vfprintf+0x206>
    15ae:	89 2d       	mov	r24, r9
    15b0:	80 68       	ori	r24, 0x80	; 128
    15b2:	98 2e       	mov	r9, r24
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <vfprintf+0x206>
    15b6:	e2 e0       	ldi	r30, 0x02	; 2
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	ec 0f       	add	r30, r28
    15bc:	fd 1f       	adc	r31, r29
    15be:	e1 0f       	add	r30, r17
    15c0:	f1 1d       	adc	r31, r1
    15c2:	80 81       	ld	r24, Z
    15c4:	80 33       	cpi	r24, 0x30	; 48
    15c6:	19 f4       	brne	.+6      	; 0x15ce <vfprintf+0x20a>
    15c8:	11 50       	subi	r17, 0x01	; 1
    15ca:	11 11       	cpse	r17, r1
    15cc:	f4 cf       	rjmp	.-24     	; 0x15b6 <vfprintf+0x1f2>
    15ce:	97 fe       	sbrs	r9, 7
    15d0:	0e c0       	rjmp	.+28     	; 0x15ee <vfprintf+0x22a>
    15d2:	44 24       	eor	r4, r4
    15d4:	43 94       	inc	r4
    15d6:	41 0e       	add	r4, r17
    15d8:	81 2f       	mov	r24, r17
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	c8 16       	cp	r12, r24
    15de:	d9 06       	cpc	r13, r25
    15e0:	2c f4       	brge	.+10     	; 0x15ec <vfprintf+0x228>
    15e2:	1c 19       	sub	r17, r12
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <vfprintf+0x22a>
    15e6:	44 24       	eor	r4, r4
    15e8:	43 94       	inc	r4
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <vfprintf+0x22a>
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	97 fe       	sbrs	r9, 7
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <vfprintf+0x23a>
    15f2:	1c 14       	cp	r1, r12
    15f4:	1d 04       	cpc	r1, r13
    15f6:	34 f4       	brge	.+12     	; 0x1604 <vfprintf+0x240>
    15f8:	c6 01       	movw	r24, r12
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <vfprintf+0x244>
    15fe:	85 e0       	ldi	r24, 0x05	; 5
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0x244>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	01 11       	cpse	r16, r1
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	11 23       	and	r17, r17
    160e:	31 f0       	breq	.+12     	; 0x161c <vfprintf+0x258>
    1610:	21 2f       	mov	r18, r17
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	2f 5f       	subi	r18, 0xFF	; 255
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	82 0f       	add	r24, r18
    161a:	93 1f       	adc	r25, r19
    161c:	25 2d       	mov	r18, r5
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	82 17       	cp	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	14 f4       	brge	.+4      	; 0x162a <vfprintf+0x266>
    1626:	58 1a       	sub	r5, r24
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x268>
    162a:	51 2c       	mov	r5, r1
    162c:	89 2d       	mov	r24, r9
    162e:	89 70       	andi	r24, 0x09	; 9
    1630:	49 f4       	brne	.+18     	; 0x1644 <vfprintf+0x280>
    1632:	55 20       	and	r5, r5
    1634:	39 f0       	breq	.+14     	; 0x1644 <vfprintf+0x280>
    1636:	b7 01       	movw	r22, r14
    1638:	80 e2       	ldi	r24, 0x20	; 32
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1640:	5a 94       	dec	r5
    1642:	f7 cf       	rjmp	.-18     	; 0x1632 <vfprintf+0x26e>
    1644:	00 23       	and	r16, r16
    1646:	29 f0       	breq	.+10     	; 0x1652 <vfprintf+0x28e>
    1648:	b7 01       	movw	r22, r14
    164a:	80 2f       	mov	r24, r16
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1652:	93 fc       	sbrc	r9, 3
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <vfprintf+0x2a4>
    1656:	55 20       	and	r5, r5
    1658:	39 f0       	breq	.+14     	; 0x1668 <vfprintf+0x2a4>
    165a:	b7 01       	movw	r22, r14
    165c:	80 e3       	ldi	r24, 0x30	; 48
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1664:	5a 94       	dec	r5
    1666:	f7 cf       	rjmp	.-18     	; 0x1656 <vfprintf+0x292>
    1668:	97 fe       	sbrs	r9, 7
    166a:	4c c0       	rjmp	.+152    	; 0x1704 <vfprintf+0x340>
    166c:	46 01       	movw	r8, r12
    166e:	d7 fe       	sbrs	r13, 7
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x2b2>
    1672:	81 2c       	mov	r8, r1
    1674:	91 2c       	mov	r9, r1
    1676:	c6 01       	movw	r24, r12
    1678:	88 19       	sub	r24, r8
    167a:	99 09       	sbc	r25, r9
    167c:	f3 01       	movw	r30, r6
    167e:	e8 0f       	add	r30, r24
    1680:	f9 1f       	adc	r31, r25
    1682:	fe 87       	std	Y+14, r31	; 0x0e
    1684:	ed 87       	std	Y+13, r30	; 0x0d
    1686:	96 01       	movw	r18, r12
    1688:	24 19       	sub	r18, r4
    168a:	31 09       	sbc	r19, r1
    168c:	38 8b       	std	Y+16, r19	; 0x10
    168e:	2f 87       	std	Y+15, r18	; 0x0f
    1690:	01 2f       	mov	r16, r17
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	11 95       	neg	r17
    1696:	01 95       	neg	r16
    1698:	11 09       	sbc	r17, r1
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	83 16       	cp	r8, r19
    169e:	93 06       	cpc	r9, r19
    16a0:	29 f4       	brne	.+10     	; 0x16ac <vfprintf+0x2e8>
    16a2:	b7 01       	movw	r22, r14
    16a4:	8e e2       	ldi	r24, 0x2E	; 46
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    16ac:	c8 14       	cp	r12, r8
    16ae:	d9 04       	cpc	r13, r9
    16b0:	4c f0       	brlt	.+18     	; 0x16c4 <vfprintf+0x300>
    16b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b4:	98 89       	ldd	r25, Y+16	; 0x10
    16b6:	88 15       	cp	r24, r8
    16b8:	99 05       	cpc	r25, r9
    16ba:	24 f4       	brge	.+8      	; 0x16c4 <vfprintf+0x300>
    16bc:	ed 85       	ldd	r30, Y+13	; 0x0d
    16be:	fe 85       	ldd	r31, Y+14	; 0x0e
    16c0:	81 81       	ldd	r24, Z+1	; 0x01
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <vfprintf+0x302>
    16c4:	80 e3       	ldi	r24, 0x30	; 48
    16c6:	f1 e0       	ldi	r31, 0x01	; 1
    16c8:	8f 1a       	sub	r8, r31
    16ca:	91 08       	sbc	r9, r1
    16cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	3e 87       	std	Y+14, r19	; 0x0e
    16d6:	2d 87       	std	Y+13, r18	; 0x0d
    16d8:	80 16       	cp	r8, r16
    16da:	91 06       	cpc	r9, r17
    16dc:	2c f0       	brlt	.+10     	; 0x16e8 <vfprintf+0x324>
    16de:	b7 01       	movw	r22, r14
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    16e6:	d9 cf       	rjmp	.-78     	; 0x169a <vfprintf+0x2d6>
    16e8:	c8 14       	cp	r12, r8
    16ea:	d9 04       	cpc	r13, r9
    16ec:	41 f4       	brne	.+16     	; 0x16fe <vfprintf+0x33a>
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	96 33       	cpi	r25, 0x36	; 54
    16f2:	20 f4       	brcc	.+8      	; 0x16fc <vfprintf+0x338>
    16f4:	95 33       	cpi	r25, 0x35	; 53
    16f6:	19 f4       	brne	.+6      	; 0x16fe <vfprintf+0x33a>
    16f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    16fa:	34 ff       	sbrs	r19, 4
    16fc:	81 e3       	ldi	r24, 0x31	; 49
    16fe:	b7 01       	movw	r22, r14
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	4e c0       	rjmp	.+156    	; 0x17a0 <vfprintf+0x3dc>
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	81 33       	cpi	r24, 0x31	; 49
    1708:	19 f0       	breq	.+6      	; 0x1710 <vfprintf+0x34c>
    170a:	9c 85       	ldd	r25, Y+12	; 0x0c
    170c:	9f 7e       	andi	r25, 0xEF	; 239
    170e:	9c 87       	std	Y+12, r25	; 0x0c
    1710:	b7 01       	movw	r22, r14
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1718:	11 11       	cpse	r17, r1
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <vfprintf+0x362>
    171c:	94 fc       	sbrc	r9, 4
    171e:	18 c0       	rjmp	.+48     	; 0x1750 <vfprintf+0x38c>
    1720:	85 e6       	ldi	r24, 0x65	; 101
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	17 c0       	rjmp	.+46     	; 0x1754 <vfprintf+0x390>
    1726:	b7 01       	movw	r22, r14
    1728:	8e e2       	ldi	r24, 0x2E	; 46
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1730:	1e 5f       	subi	r17, 0xFE	; 254
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	01 e0       	ldi	r16, 0x01	; 1
    1736:	08 0f       	add	r16, r24
    1738:	f3 01       	movw	r30, r6
    173a:	e8 0f       	add	r30, r24
    173c:	f1 1d       	adc	r31, r1
    173e:	80 81       	ld	r24, Z
    1740:	b7 01       	movw	r22, r14
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1748:	80 2f       	mov	r24, r16
    174a:	01 13       	cpse	r16, r17
    174c:	f3 cf       	rjmp	.-26     	; 0x1734 <vfprintf+0x370>
    174e:	e6 cf       	rjmp	.-52     	; 0x171c <vfprintf+0x358>
    1750:	85 e4       	ldi	r24, 0x45	; 69
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	b7 01       	movw	r22, r14
    1756:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    175a:	d7 fc       	sbrc	r13, 7
    175c:	06 c0       	rjmp	.+12     	; 0x176a <vfprintf+0x3a6>
    175e:	c1 14       	cp	r12, r1
    1760:	d1 04       	cpc	r13, r1
    1762:	41 f4       	brne	.+16     	; 0x1774 <vfprintf+0x3b0>
    1764:	ec 85       	ldd	r30, Y+12	; 0x0c
    1766:	e4 ff       	sbrs	r30, 4
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <vfprintf+0x3b0>
    176a:	d1 94       	neg	r13
    176c:	c1 94       	neg	r12
    176e:	d1 08       	sbc	r13, r1
    1770:	8d e2       	ldi	r24, 0x2D	; 45
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <vfprintf+0x3b2>
    1774:	8b e2       	ldi	r24, 0x2B	; 43
    1776:	b7 01       	movw	r22, r14
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	2a e0       	ldi	r18, 0x0A	; 10
    1782:	c2 16       	cp	r12, r18
    1784:	d1 04       	cpc	r13, r1
    1786:	2c f0       	brlt	.+10     	; 0x1792 <vfprintf+0x3ce>
    1788:	8f 5f       	subi	r24, 0xFF	; 255
    178a:	fa e0       	ldi	r31, 0x0A	; 10
    178c:	cf 1a       	sub	r12, r31
    178e:	d1 08       	sbc	r13, r1
    1790:	f7 cf       	rjmp	.-18     	; 0x1780 <vfprintf+0x3bc>
    1792:	b7 01       	movw	r22, r14
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    179a:	b7 01       	movw	r22, r14
    179c:	c6 01       	movw	r24, r12
    179e:	c0 96       	adiw	r24, 0x30	; 48
    17a0:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    17a4:	54 c1       	rjmp	.+680    	; 0x1a4e <vfprintf+0x68a>
    17a6:	83 36       	cpi	r24, 0x63	; 99
    17a8:	31 f0       	breq	.+12     	; 0x17b6 <vfprintf+0x3f2>
    17aa:	83 37       	cpi	r24, 0x73	; 115
    17ac:	79 f0       	breq	.+30     	; 0x17cc <vfprintf+0x408>
    17ae:	83 35       	cpi	r24, 0x53	; 83
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <vfprintf+0x3f0>
    17b2:	56 c0       	rjmp	.+172    	; 0x1860 <vfprintf+0x49c>
    17b4:	20 c0       	rjmp	.+64     	; 0x17f6 <vfprintf+0x432>
    17b6:	56 01       	movw	r10, r12
    17b8:	32 e0       	ldi	r19, 0x02	; 2
    17ba:	a3 0e       	add	r10, r19
    17bc:	b1 1c       	adc	r11, r1
    17be:	f6 01       	movw	r30, r12
    17c0:	80 81       	ld	r24, Z
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	01 e0       	ldi	r16, 0x01	; 1
    17c6:	10 e0       	ldi	r17, 0x00	; 0
    17c8:	63 01       	movw	r12, r6
    17ca:	12 c0       	rjmp	.+36     	; 0x17f0 <vfprintf+0x42c>
    17cc:	56 01       	movw	r10, r12
    17ce:	f2 e0       	ldi	r31, 0x02	; 2
    17d0:	af 0e       	add	r10, r31
    17d2:	b1 1c       	adc	r11, r1
    17d4:	f6 01       	movw	r30, r12
    17d6:	c0 80       	ld	r12, Z
    17d8:	d1 80       	ldd	r13, Z+1	; 0x01
    17da:	96 fe       	sbrs	r9, 6
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <vfprintf+0x420>
    17de:	61 2f       	mov	r22, r17
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vfprintf+0x424>
    17e4:	6f ef       	ldi	r22, 0xFF	; 255
    17e6:	7f ef       	ldi	r23, 0xFF	; 255
    17e8:	c6 01       	movw	r24, r12
    17ea:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <strnlen>
    17ee:	8c 01       	movw	r16, r24
    17f0:	f9 2d       	mov	r31, r9
    17f2:	ff 77       	andi	r31, 0x7F	; 127
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <vfprintf+0x45a>
    17f6:	56 01       	movw	r10, r12
    17f8:	22 e0       	ldi	r18, 0x02	; 2
    17fa:	a2 0e       	add	r10, r18
    17fc:	b1 1c       	adc	r11, r1
    17fe:	f6 01       	movw	r30, r12
    1800:	c0 80       	ld	r12, Z
    1802:	d1 80       	ldd	r13, Z+1	; 0x01
    1804:	96 fe       	sbrs	r9, 6
    1806:	03 c0       	rjmp	.+6      	; 0x180e <vfprintf+0x44a>
    1808:	61 2f       	mov	r22, r17
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <vfprintf+0x44e>
    180e:	6f ef       	ldi	r22, 0xFF	; 255
    1810:	7f ef       	ldi	r23, 0xFF	; 255
    1812:	c6 01       	movw	r24, r12
    1814:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <strnlen_P>
    1818:	8c 01       	movw	r16, r24
    181a:	f9 2d       	mov	r31, r9
    181c:	f0 68       	ori	r31, 0x80	; 128
    181e:	9f 2e       	mov	r9, r31
    1820:	f3 fd       	sbrc	r31, 3
    1822:	1a c0       	rjmp	.+52     	; 0x1858 <vfprintf+0x494>
    1824:	85 2d       	mov	r24, r5
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	08 17       	cp	r16, r24
    182a:	19 07       	cpc	r17, r25
    182c:	a8 f4       	brcc	.+42     	; 0x1858 <vfprintf+0x494>
    182e:	b7 01       	movw	r22, r14
    1830:	80 e2       	ldi	r24, 0x20	; 32
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1838:	5a 94       	dec	r5
    183a:	f4 cf       	rjmp	.-24     	; 0x1824 <vfprintf+0x460>
    183c:	f6 01       	movw	r30, r12
    183e:	97 fc       	sbrc	r9, 7
    1840:	85 91       	lpm	r24, Z+
    1842:	97 fe       	sbrs	r9, 7
    1844:	81 91       	ld	r24, Z+
    1846:	6f 01       	movw	r12, r30
    1848:	b7 01       	movw	r22, r14
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1850:	51 10       	cpse	r5, r1
    1852:	5a 94       	dec	r5
    1854:	01 50       	subi	r16, 0x01	; 1
    1856:	11 09       	sbc	r17, r1
    1858:	01 15       	cp	r16, r1
    185a:	11 05       	cpc	r17, r1
    185c:	79 f7       	brne	.-34     	; 0x183c <vfprintf+0x478>
    185e:	f7 c0       	rjmp	.+494    	; 0x1a4e <vfprintf+0x68a>
    1860:	84 36       	cpi	r24, 0x64	; 100
    1862:	11 f0       	breq	.+4      	; 0x1868 <vfprintf+0x4a4>
    1864:	89 36       	cpi	r24, 0x69	; 105
    1866:	61 f5       	brne	.+88     	; 0x18c0 <vfprintf+0x4fc>
    1868:	56 01       	movw	r10, r12
    186a:	97 fe       	sbrs	r9, 7
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <vfprintf+0x4bc>
    186e:	24 e0       	ldi	r18, 0x04	; 4
    1870:	a2 0e       	add	r10, r18
    1872:	b1 1c       	adc	r11, r1
    1874:	f6 01       	movw	r30, r12
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <vfprintf+0x4d0>
    1880:	f2 e0       	ldi	r31, 0x02	; 2
    1882:	af 0e       	add	r10, r31
    1884:	b1 1c       	adc	r11, r1
    1886:	f6 01       	movw	r30, r12
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	07 2e       	mov	r0, r23
    188e:	00 0c       	add	r0, r0
    1890:	88 0b       	sbc	r24, r24
    1892:	99 0b       	sbc	r25, r25
    1894:	f9 2d       	mov	r31, r9
    1896:	ff 76       	andi	r31, 0x6F	; 111
    1898:	9f 2e       	mov	r9, r31
    189a:	97 ff       	sbrs	r25, 7
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <vfprintf+0x4ec>
    189e:	90 95       	com	r25
    18a0:	80 95       	com	r24
    18a2:	70 95       	com	r23
    18a4:	61 95       	neg	r22
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	8f 4f       	sbci	r24, 0xFF	; 255
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	f0 68       	ori	r31, 0x80	; 128
    18ae:	9f 2e       	mov	r9, r31
    18b0:	2a e0       	ldi	r18, 0x0A	; 10
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	a3 01       	movw	r20, r6
    18b6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ultoa_invert>
    18ba:	c8 2e       	mov	r12, r24
    18bc:	c6 18       	sub	r12, r6
    18be:	3f c0       	rjmp	.+126    	; 0x193e <vfprintf+0x57a>
    18c0:	09 2d       	mov	r16, r9
    18c2:	85 37       	cpi	r24, 0x75	; 117
    18c4:	21 f4       	brne	.+8      	; 0x18ce <vfprintf+0x50a>
    18c6:	0f 7e       	andi	r16, 0xEF	; 239
    18c8:	2a e0       	ldi	r18, 0x0A	; 10
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	1d c0       	rjmp	.+58     	; 0x1908 <vfprintf+0x544>
    18ce:	09 7f       	andi	r16, 0xF9	; 249
    18d0:	8f 36       	cpi	r24, 0x6F	; 111
    18d2:	91 f0       	breq	.+36     	; 0x18f8 <vfprintf+0x534>
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <vfprintf+0x518>
    18d6:	88 35       	cpi	r24, 0x58	; 88
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <vfprintf+0x52c>
    18da:	c3 c0       	rjmp	.+390    	; 0x1a62 <vfprintf+0x69e>
    18dc:	80 37       	cpi	r24, 0x70	; 112
    18de:	19 f0       	breq	.+6      	; 0x18e6 <vfprintf+0x522>
    18e0:	88 37       	cpi	r24, 0x78	; 120
    18e2:	11 f0       	breq	.+4      	; 0x18e8 <vfprintf+0x524>
    18e4:	be c0       	rjmp	.+380    	; 0x1a62 <vfprintf+0x69e>
    18e6:	00 61       	ori	r16, 0x10	; 16
    18e8:	04 ff       	sbrs	r16, 4
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <vfprintf+0x53a>
    18ec:	04 60       	ori	r16, 0x04	; 4
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <vfprintf+0x53a>
    18f0:	94 fe       	sbrs	r9, 4
    18f2:	08 c0       	rjmp	.+16     	; 0x1904 <vfprintf+0x540>
    18f4:	06 60       	ori	r16, 0x06	; 6
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <vfprintf+0x540>
    18f8:	28 e0       	ldi	r18, 0x08	; 8
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	05 c0       	rjmp	.+10     	; 0x1908 <vfprintf+0x544>
    18fe:	20 e1       	ldi	r18, 0x10	; 16
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0x544>
    1904:	20 e1       	ldi	r18, 0x10	; 16
    1906:	32 e0       	ldi	r19, 0x02	; 2
    1908:	56 01       	movw	r10, r12
    190a:	07 ff       	sbrs	r16, 7
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <vfprintf+0x55c>
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	a8 0e       	add	r10, r24
    1912:	b1 1c       	adc	r11, r1
    1914:	f6 01       	movw	r30, r12
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <vfprintf+0x56c>
    1920:	f2 e0       	ldi	r31, 0x02	; 2
    1922:	af 0e       	add	r10, r31
    1924:	b1 1c       	adc	r11, r1
    1926:	f6 01       	movw	r30, r12
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a3 01       	movw	r20, r6
    1932:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ultoa_invert>
    1936:	c8 2e       	mov	r12, r24
    1938:	c6 18       	sub	r12, r6
    193a:	0f 77       	andi	r16, 0x7F	; 127
    193c:	90 2e       	mov	r9, r16
    193e:	96 fe       	sbrs	r9, 6
    1940:	0b c0       	rjmp	.+22     	; 0x1958 <vfprintf+0x594>
    1942:	09 2d       	mov	r16, r9
    1944:	0e 7f       	andi	r16, 0xFE	; 254
    1946:	c1 16       	cp	r12, r17
    1948:	50 f4       	brcc	.+20     	; 0x195e <vfprintf+0x59a>
    194a:	94 fe       	sbrs	r9, 4
    194c:	0a c0       	rjmp	.+20     	; 0x1962 <vfprintf+0x59e>
    194e:	92 fc       	sbrc	r9, 2
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <vfprintf+0x59e>
    1952:	09 2d       	mov	r16, r9
    1954:	0e 7e       	andi	r16, 0xEE	; 238
    1956:	05 c0       	rjmp	.+10     	; 0x1962 <vfprintf+0x59e>
    1958:	dc 2c       	mov	r13, r12
    195a:	09 2d       	mov	r16, r9
    195c:	03 c0       	rjmp	.+6      	; 0x1964 <vfprintf+0x5a0>
    195e:	dc 2c       	mov	r13, r12
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <vfprintf+0x5a0>
    1962:	d1 2e       	mov	r13, r17
    1964:	04 ff       	sbrs	r16, 4
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <vfprintf+0x5be>
    1968:	fe 01       	movw	r30, r28
    196a:	ec 0d       	add	r30, r12
    196c:	f1 1d       	adc	r31, r1
    196e:	80 81       	ld	r24, Z
    1970:	80 33       	cpi	r24, 0x30	; 48
    1972:	11 f4       	brne	.+4      	; 0x1978 <vfprintf+0x5b4>
    1974:	09 7e       	andi	r16, 0xE9	; 233
    1976:	09 c0       	rjmp	.+18     	; 0x198a <vfprintf+0x5c6>
    1978:	02 ff       	sbrs	r16, 2
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x5c4>
    197c:	d3 94       	inc	r13
    197e:	d3 94       	inc	r13
    1980:	04 c0       	rjmp	.+8      	; 0x198a <vfprintf+0x5c6>
    1982:	80 2f       	mov	r24, r16
    1984:	86 78       	andi	r24, 0x86	; 134
    1986:	09 f0       	breq	.+2      	; 0x198a <vfprintf+0x5c6>
    1988:	d3 94       	inc	r13
    198a:	03 fd       	sbrc	r16, 3
    198c:	11 c0       	rjmp	.+34     	; 0x19b0 <vfprintf+0x5ec>
    198e:	00 ff       	sbrs	r16, 0
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x5da>
    1992:	1c 2d       	mov	r17, r12
    1994:	d5 14       	cp	r13, r5
    1996:	80 f4       	brcc	.+32     	; 0x19b8 <vfprintf+0x5f4>
    1998:	15 0d       	add	r17, r5
    199a:	1d 19       	sub	r17, r13
    199c:	0d c0       	rjmp	.+26     	; 0x19b8 <vfprintf+0x5f4>
    199e:	d5 14       	cp	r13, r5
    19a0:	58 f4       	brcc	.+22     	; 0x19b8 <vfprintf+0x5f4>
    19a2:	b7 01       	movw	r22, r14
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    19ac:	d3 94       	inc	r13
    19ae:	f7 cf       	rjmp	.-18     	; 0x199e <vfprintf+0x5da>
    19b0:	d5 14       	cp	r13, r5
    19b2:	10 f4       	brcc	.+4      	; 0x19b8 <vfprintf+0x5f4>
    19b4:	5d 18       	sub	r5, r13
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <vfprintf+0x5f6>
    19b8:	51 2c       	mov	r5, r1
    19ba:	04 ff       	sbrs	r16, 4
    19bc:	10 c0       	rjmp	.+32     	; 0x19de <vfprintf+0x61a>
    19be:	b7 01       	movw	r22, r14
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    19c8:	02 ff       	sbrs	r16, 2
    19ca:	17 c0       	rjmp	.+46     	; 0x19fa <vfprintf+0x636>
    19cc:	01 fd       	sbrc	r16, 1
    19ce:	03 c0       	rjmp	.+6      	; 0x19d6 <vfprintf+0x612>
    19d0:	88 e7       	ldi	r24, 0x78	; 120
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfprintf+0x616>
    19d6:	88 e5       	ldi	r24, 0x58	; 88
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	b7 01       	movw	r22, r14
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <vfprintf+0x632>
    19de:	80 2f       	mov	r24, r16
    19e0:	86 78       	andi	r24, 0x86	; 134
    19e2:	59 f0       	breq	.+22     	; 0x19fa <vfprintf+0x636>
    19e4:	01 ff       	sbrs	r16, 1
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <vfprintf+0x628>
    19e8:	8b e2       	ldi	r24, 0x2B	; 43
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <vfprintf+0x62a>
    19ec:	80 e2       	ldi	r24, 0x20	; 32
    19ee:	07 fd       	sbrc	r16, 7
    19f0:	8d e2       	ldi	r24, 0x2D	; 45
    19f2:	b7 01       	movw	r22, r14
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    19fa:	c1 16       	cp	r12, r17
    19fc:	38 f4       	brcc	.+14     	; 0x1a0c <vfprintf+0x648>
    19fe:	b7 01       	movw	r22, r14
    1a00:	80 e3       	ldi	r24, 0x30	; 48
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1a08:	11 50       	subi	r17, 0x01	; 1
    1a0a:	f7 cf       	rjmp	.-18     	; 0x19fa <vfprintf+0x636>
    1a0c:	ca 94       	dec	r12
    1a0e:	f3 01       	movw	r30, r6
    1a10:	ec 0d       	add	r30, r12
    1a12:	f1 1d       	adc	r31, r1
    1a14:	80 81       	ld	r24, Z
    1a16:	b7 01       	movw	r22, r14
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1a1e:	c1 10       	cpse	r12, r1
    1a20:	f5 cf       	rjmp	.-22     	; 0x1a0c <vfprintf+0x648>
    1a22:	15 c0       	rjmp	.+42     	; 0x1a4e <vfprintf+0x68a>
    1a24:	f4 e0       	ldi	r31, 0x04	; 4
    1a26:	f5 15       	cp	r31, r5
    1a28:	60 f5       	brcc	.+88     	; 0x1a82 <vfprintf+0x6be>
    1a2a:	84 e0       	ldi	r24, 0x04	; 4
    1a2c:	58 1a       	sub	r5, r24
    1a2e:	93 fe       	sbrs	r9, 3
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <vfprintf+0x6ac>
    1a32:	01 11       	cpse	r16, r1
    1a34:	27 c0       	rjmp	.+78     	; 0x1a84 <vfprintf+0x6c0>
    1a36:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a38:	23 ff       	sbrs	r18, 3
    1a3a:	2a c0       	rjmp	.+84     	; 0x1a90 <vfprintf+0x6cc>
    1a3c:	04 e7       	ldi	r16, 0x74	; 116
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	39 2d       	mov	r19, r9
    1a42:	30 71       	andi	r19, 0x10	; 16
    1a44:	93 2e       	mov	r9, r19
    1a46:	f8 01       	movw	r30, r16
    1a48:	84 91       	lpm	r24, Z
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	24 c0       	rjmp	.+72     	; 0x1a96 <vfprintf+0x6d2>
    1a4e:	55 20       	and	r5, r5
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <vfprintf+0x690>
    1a52:	e4 cc       	rjmp	.-1592   	; 0x141c <vfprintf+0x58>
    1a54:	b7 01       	movw	r22, r14
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1a5e:	5a 94       	dec	r5
    1a60:	f6 cf       	rjmp	.-20     	; 0x1a4e <vfprintf+0x68a>
    1a62:	f7 01       	movw	r30, r14
    1a64:	86 81       	ldd	r24, Z+6	; 0x06
    1a66:	97 81       	ldd	r25, Z+7	; 0x07
    1a68:	26 c0       	rjmp	.+76     	; 0x1ab6 <vfprintf+0x6f2>
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	23 c0       	rjmp	.+70     	; 0x1ab6 <vfprintf+0x6f2>
    1a70:	b7 01       	movw	r22, r14
    1a72:	80 e2       	ldi	r24, 0x20	; 32
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1a7a:	5a 94       	dec	r5
    1a7c:	51 10       	cpse	r5, r1
    1a7e:	f8 cf       	rjmp	.-16     	; 0x1a70 <vfprintf+0x6ac>
    1a80:	d8 cf       	rjmp	.-80     	; 0x1a32 <vfprintf+0x66e>
    1a82:	51 2c       	mov	r5, r1
    1a84:	b7 01       	movw	r22, r14
    1a86:	80 2f       	mov	r24, r16
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1a8e:	d3 cf       	rjmp	.-90     	; 0x1a36 <vfprintf+0x672>
    1a90:	08 e7       	ldi	r16, 0x78	; 120
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	d5 cf       	rjmp	.-86     	; 0x1a40 <vfprintf+0x67c>
    1a96:	91 10       	cpse	r9, r1
    1a98:	80 52       	subi	r24, 0x20	; 32
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <fputc>
    1aa2:	0f 5f       	subi	r16, 0xFF	; 255
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	cf cf       	rjmp	.-98     	; 0x1a46 <vfprintf+0x682>
    1aa8:	23 e0       	ldi	r18, 0x03	; 3
    1aaa:	25 15       	cp	r18, r5
    1aac:	10 f4       	brcc	.+4      	; 0x1ab2 <vfprintf+0x6ee>
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	bd cf       	rjmp	.-134    	; 0x1a2c <vfprintf+0x668>
    1ab2:	51 2c       	mov	r5, r1
    1ab4:	c0 cf       	rjmp	.-128    	; 0x1a36 <vfprintf+0x672>
    1ab6:	60 96       	adiw	r28, 0x10	; 16
    1ab8:	e2 e1       	ldi	r30, 0x12	; 18
    1aba:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__epilogue_restores__>

00001abe <__tablejump2__>:
    1abe:	ee 0f       	add	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	05 90       	lpm	r0, Z+
    1ac4:	f4 91       	lpm	r31, Z
    1ac6:	e0 2d       	mov	r30, r0
    1ac8:	09 94       	ijmp

00001aca <__prologue_saves__>:
    1aca:	2f 92       	push	r2
    1acc:	3f 92       	push	r3
    1ace:	4f 92       	push	r4
    1ad0:	5f 92       	push	r5
    1ad2:	6f 92       	push	r6
    1ad4:	7f 92       	push	r7
    1ad6:	8f 92       	push	r8
    1ad8:	9f 92       	push	r9
    1ada:	af 92       	push	r10
    1adc:	bf 92       	push	r11
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	ca 1b       	sub	r28, r26
    1af4:	db 0b       	sbc	r29, r27
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	09 94       	ijmp

00001b02 <__epilogue_restores__>:
    1b02:	2a 88       	ldd	r2, Y+18	; 0x12
    1b04:	39 88       	ldd	r3, Y+17	; 0x11
    1b06:	48 88       	ldd	r4, Y+16	; 0x10
    1b08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b14:	b9 84       	ldd	r11, Y+9	; 0x09
    1b16:	c8 84       	ldd	r12, Y+8	; 0x08
    1b18:	df 80       	ldd	r13, Y+7	; 0x07
    1b1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b20:	1b 81       	ldd	r17, Y+3	; 0x03
    1b22:	aa 81       	ldd	r26, Y+2	; 0x02
    1b24:	b9 81       	ldd	r27, Y+1	; 0x01
    1b26:	ce 0f       	add	r28, r30
    1b28:	d1 1d       	adc	r29, r1
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	ed 01       	movw	r28, r26
    1b36:	08 95       	ret

00001b38 <__ftoa_engine>:
    1b38:	28 30       	cpi	r18, 0x08	; 8
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <__ftoa_engine+0x6>
    1b3c:	27 e0       	ldi	r18, 0x07	; 7
    1b3e:	33 27       	eor	r19, r19
    1b40:	da 01       	movw	r26, r20
    1b42:	99 0f       	add	r25, r25
    1b44:	31 1d       	adc	r19, r1
    1b46:	87 fd       	sbrc	r24, 7
    1b48:	91 60       	ori	r25, 0x01	; 1
    1b4a:	00 96       	adiw	r24, 0x00	; 0
    1b4c:	61 05       	cpc	r22, r1
    1b4e:	71 05       	cpc	r23, r1
    1b50:	39 f4       	brne	.+14     	; 0x1b60 <__ftoa_engine+0x28>
    1b52:	32 60       	ori	r19, 0x02	; 2
    1b54:	2e 5f       	subi	r18, 0xFE	; 254
    1b56:	3d 93       	st	X+, r19
    1b58:	30 e3       	ldi	r19, 0x30	; 48
    1b5a:	2a 95       	dec	r18
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <__ftoa_engine+0x1e>
    1b5e:	08 95       	ret
    1b60:	9f 3f       	cpi	r25, 0xFF	; 255
    1b62:	30 f0       	brcs	.+12     	; 0x1b70 <__ftoa_engine+0x38>
    1b64:	80 38       	cpi	r24, 0x80	; 128
    1b66:	71 05       	cpc	r23, r1
    1b68:	61 05       	cpc	r22, r1
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <__ftoa_engine+0x36>
    1b6c:	3c 5f       	subi	r19, 0xFC	; 252
    1b6e:	3c 5f       	subi	r19, 0xFC	; 252
    1b70:	3d 93       	st	X+, r19
    1b72:	91 30       	cpi	r25, 0x01	; 1
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <__ftoa_engine+0x40>
    1b76:	80 68       	ori	r24, 0x80	; 128
    1b78:	91 1d       	adc	r25, r1
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	1f 93       	push	r17
    1b80:	0f 93       	push	r16
    1b82:	ff 92       	push	r15
    1b84:	ef 92       	push	r14
    1b86:	19 2f       	mov	r17, r25
    1b88:	98 7f       	andi	r25, 0xF8	; 248
    1b8a:	96 95       	lsr	r25
    1b8c:	e9 2f       	mov	r30, r25
    1b8e:	96 95       	lsr	r25
    1b90:	96 95       	lsr	r25
    1b92:	e9 0f       	add	r30, r25
    1b94:	ff 27       	eor	r31, r31
    1b96:	ea 52       	subi	r30, 0x2A	; 42
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	99 27       	eor	r25, r25
    1b9c:	33 27       	eor	r19, r19
    1b9e:	ee 24       	eor	r14, r14
    1ba0:	ff 24       	eor	r15, r15
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	e7 01       	movw	r28, r14
    1ba6:	05 90       	lpm	r0, Z+
    1ba8:	08 94       	sec
    1baa:	07 94       	ror	r0
    1bac:	28 f4       	brcc	.+10     	; 0x1bb8 <__ftoa_engine+0x80>
    1bae:	36 0f       	add	r19, r22
    1bb0:	e7 1e       	adc	r14, r23
    1bb2:	f8 1e       	adc	r15, r24
    1bb4:	49 1f       	adc	r20, r25
    1bb6:	51 1d       	adc	r21, r1
    1bb8:	66 0f       	add	r22, r22
    1bba:	77 1f       	adc	r23, r23
    1bbc:	88 1f       	adc	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	06 94       	lsr	r0
    1bc2:	a1 f7       	brne	.-24     	; 0x1bac <__ftoa_engine+0x74>
    1bc4:	05 90       	lpm	r0, Z+
    1bc6:	07 94       	ror	r0
    1bc8:	28 f4       	brcc	.+10     	; 0x1bd4 <__ftoa_engine+0x9c>
    1bca:	e7 0e       	add	r14, r23
    1bcc:	f8 1e       	adc	r15, r24
    1bce:	49 1f       	adc	r20, r25
    1bd0:	56 1f       	adc	r21, r22
    1bd2:	c1 1d       	adc	r28, r1
    1bd4:	77 0f       	add	r23, r23
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	66 1f       	adc	r22, r22
    1bdc:	06 94       	lsr	r0
    1bde:	a1 f7       	brne	.-24     	; 0x1bc8 <__ftoa_engine+0x90>
    1be0:	05 90       	lpm	r0, Z+
    1be2:	07 94       	ror	r0
    1be4:	28 f4       	brcc	.+10     	; 0x1bf0 <__ftoa_engine+0xb8>
    1be6:	f8 0e       	add	r15, r24
    1be8:	49 1f       	adc	r20, r25
    1bea:	56 1f       	adc	r21, r22
    1bec:	c7 1f       	adc	r28, r23
    1bee:	d1 1d       	adc	r29, r1
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	66 1f       	adc	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	06 94       	lsr	r0
    1bfa:	a1 f7       	brne	.-24     	; 0x1be4 <__ftoa_engine+0xac>
    1bfc:	05 90       	lpm	r0, Z+
    1bfe:	07 94       	ror	r0
    1c00:	20 f4       	brcc	.+8      	; 0x1c0a <__ftoa_engine+0xd2>
    1c02:	49 0f       	add	r20, r25
    1c04:	56 1f       	adc	r21, r22
    1c06:	c7 1f       	adc	r28, r23
    1c08:	d8 1f       	adc	r29, r24
    1c0a:	99 0f       	add	r25, r25
    1c0c:	66 1f       	adc	r22, r22
    1c0e:	77 1f       	adc	r23, r23
    1c10:	88 1f       	adc	r24, r24
    1c12:	06 94       	lsr	r0
    1c14:	a9 f7       	brne	.-22     	; 0x1c00 <__ftoa_engine+0xc8>
    1c16:	84 91       	lpm	r24, Z
    1c18:	10 95       	com	r17
    1c1a:	17 70       	andi	r17, 0x07	; 7
    1c1c:	41 f0       	breq	.+16     	; 0x1c2e <__ftoa_engine+0xf6>
    1c1e:	d6 95       	lsr	r29
    1c20:	c7 95       	ror	r28
    1c22:	57 95       	ror	r21
    1c24:	47 95       	ror	r20
    1c26:	f7 94       	ror	r15
    1c28:	e7 94       	ror	r14
    1c2a:	1a 95       	dec	r17
    1c2c:	c1 f7       	brne	.-16     	; 0x1c1e <__ftoa_engine+0xe6>
    1c2e:	ec e7       	ldi	r30, 0x7C	; 124
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	68 94       	set
    1c34:	15 90       	lpm	r1, Z+
    1c36:	15 91       	lpm	r17, Z+
    1c38:	35 91       	lpm	r19, Z+
    1c3a:	65 91       	lpm	r22, Z+
    1c3c:	95 91       	lpm	r25, Z+
    1c3e:	05 90       	lpm	r0, Z+
    1c40:	7f e2       	ldi	r23, 0x2F	; 47
    1c42:	73 95       	inc	r23
    1c44:	e1 18       	sub	r14, r1
    1c46:	f1 0a       	sbc	r15, r17
    1c48:	43 0b       	sbc	r20, r19
    1c4a:	56 0b       	sbc	r21, r22
    1c4c:	c9 0b       	sbc	r28, r25
    1c4e:	d0 09       	sbc	r29, r0
    1c50:	c0 f7       	brcc	.-16     	; 0x1c42 <__ftoa_engine+0x10a>
    1c52:	e1 0c       	add	r14, r1
    1c54:	f1 1e       	adc	r15, r17
    1c56:	43 1f       	adc	r20, r19
    1c58:	56 1f       	adc	r21, r22
    1c5a:	c9 1f       	adc	r28, r25
    1c5c:	d0 1d       	adc	r29, r0
    1c5e:	7e f4       	brtc	.+30     	; 0x1c7e <__ftoa_engine+0x146>
    1c60:	70 33       	cpi	r23, 0x30	; 48
    1c62:	11 f4       	brne	.+4      	; 0x1c68 <__ftoa_engine+0x130>
    1c64:	8a 95       	dec	r24
    1c66:	e6 cf       	rjmp	.-52     	; 0x1c34 <__ftoa_engine+0xfc>
    1c68:	e8 94       	clt
    1c6a:	01 50       	subi	r16, 0x01	; 1
    1c6c:	30 f0       	brcs	.+12     	; 0x1c7a <__ftoa_engine+0x142>
    1c6e:	08 0f       	add	r16, r24
    1c70:	0a f4       	brpl	.+2      	; 0x1c74 <__ftoa_engine+0x13c>
    1c72:	00 27       	eor	r16, r16
    1c74:	02 17       	cp	r16, r18
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <__ftoa_engine+0x142>
    1c78:	20 2f       	mov	r18, r16
    1c7a:	23 95       	inc	r18
    1c7c:	02 2f       	mov	r16, r18
    1c7e:	7a 33       	cpi	r23, 0x3A	; 58
    1c80:	28 f0       	brcs	.+10     	; 0x1c8c <__ftoa_engine+0x154>
    1c82:	79 e3       	ldi	r23, 0x39	; 57
    1c84:	7d 93       	st	X+, r23
    1c86:	2a 95       	dec	r18
    1c88:	e9 f7       	brne	.-6      	; 0x1c84 <__ftoa_engine+0x14c>
    1c8a:	10 c0       	rjmp	.+32     	; 0x1cac <__ftoa_engine+0x174>
    1c8c:	7d 93       	st	X+, r23
    1c8e:	2a 95       	dec	r18
    1c90:	89 f6       	brne	.-94     	; 0x1c34 <__ftoa_engine+0xfc>
    1c92:	06 94       	lsr	r0
    1c94:	97 95       	ror	r25
    1c96:	67 95       	ror	r22
    1c98:	37 95       	ror	r19
    1c9a:	17 95       	ror	r17
    1c9c:	17 94       	ror	r1
    1c9e:	e1 18       	sub	r14, r1
    1ca0:	f1 0a       	sbc	r15, r17
    1ca2:	43 0b       	sbc	r20, r19
    1ca4:	56 0b       	sbc	r21, r22
    1ca6:	c9 0b       	sbc	r28, r25
    1ca8:	d0 09       	sbc	r29, r0
    1caa:	98 f0       	brcs	.+38     	; 0x1cd2 <__ftoa_engine+0x19a>
    1cac:	23 95       	inc	r18
    1cae:	7e 91       	ld	r23, -X
    1cb0:	73 95       	inc	r23
    1cb2:	7a 33       	cpi	r23, 0x3A	; 58
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <__ftoa_engine+0x180>
    1cb6:	70 e3       	ldi	r23, 0x30	; 48
    1cb8:	7c 93       	st	X, r23
    1cba:	20 13       	cpse	r18, r16
    1cbc:	b8 f7       	brcc	.-18     	; 0x1cac <__ftoa_engine+0x174>
    1cbe:	7e 91       	ld	r23, -X
    1cc0:	70 61       	ori	r23, 0x10	; 16
    1cc2:	7d 93       	st	X+, r23
    1cc4:	30 f0       	brcs	.+12     	; 0x1cd2 <__ftoa_engine+0x19a>
    1cc6:	83 95       	inc	r24
    1cc8:	71 e3       	ldi	r23, 0x31	; 49
    1cca:	7d 93       	st	X+, r23
    1ccc:	70 e3       	ldi	r23, 0x30	; 48
    1cce:	2a 95       	dec	r18
    1cd0:	e1 f7       	brne	.-8      	; 0x1cca <__ftoa_engine+0x192>
    1cd2:	11 24       	eor	r1, r1
    1cd4:	ef 90       	pop	r14
    1cd6:	ff 90       	pop	r15
    1cd8:	0f 91       	pop	r16
    1cda:	1f 91       	pop	r17
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	99 27       	eor	r25, r25
    1ce2:	87 fd       	sbrc	r24, 7
    1ce4:	90 95       	com	r25
    1ce6:	08 95       	ret

00001ce8 <strnlen_P>:
    1ce8:	fc 01       	movw	r30, r24
    1cea:	05 90       	lpm	r0, Z+
    1cec:	61 50       	subi	r22, 0x01	; 1
    1cee:	70 40       	sbci	r23, 0x00	; 0
    1cf0:	01 10       	cpse	r0, r1
    1cf2:	d8 f7       	brcc	.-10     	; 0x1cea <strnlen_P+0x2>
    1cf4:	80 95       	com	r24
    1cf6:	90 95       	com	r25
    1cf8:	8e 0f       	add	r24, r30
    1cfa:	9f 1f       	adc	r25, r31
    1cfc:	08 95       	ret

00001cfe <strnlen>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	61 50       	subi	r22, 0x01	; 1
    1d02:	70 40       	sbci	r23, 0x00	; 0
    1d04:	01 90       	ld	r0, Z+
    1d06:	01 10       	cpse	r0, r1
    1d08:	d8 f7       	brcc	.-10     	; 0x1d00 <strnlen+0x2>
    1d0a:	80 95       	com	r24
    1d0c:	90 95       	com	r25
    1d0e:	8e 0f       	add	r24, r30
    1d10:	9f 1f       	adc	r25, r31
    1d12:	08 95       	ret

00001d14 <fputc>:
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	fb 01       	movw	r30, r22
    1d1e:	23 81       	ldd	r18, Z+3	; 0x03
    1d20:	21 fd       	sbrc	r18, 1
    1d22:	03 c0       	rjmp	.+6      	; 0x1d2a <fputc+0x16>
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	9f ef       	ldi	r25, 0xFF	; 255
    1d28:	2c c0       	rjmp	.+88     	; 0x1d82 <fputc+0x6e>
    1d2a:	22 ff       	sbrs	r18, 2
    1d2c:	16 c0       	rjmp	.+44     	; 0x1d5a <fputc+0x46>
    1d2e:	46 81       	ldd	r20, Z+6	; 0x06
    1d30:	57 81       	ldd	r21, Z+7	; 0x07
    1d32:	24 81       	ldd	r18, Z+4	; 0x04
    1d34:	35 81       	ldd	r19, Z+5	; 0x05
    1d36:	42 17       	cp	r20, r18
    1d38:	53 07       	cpc	r21, r19
    1d3a:	44 f4       	brge	.+16     	; 0x1d4c <fputc+0x38>
    1d3c:	a0 81       	ld	r26, Z
    1d3e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d40:	9d 01       	movw	r18, r26
    1d42:	2f 5f       	subi	r18, 0xFF	; 255
    1d44:	3f 4f       	sbci	r19, 0xFF	; 255
    1d46:	31 83       	std	Z+1, r19	; 0x01
    1d48:	20 83       	st	Z, r18
    1d4a:	8c 93       	st	X, r24
    1d4c:	26 81       	ldd	r18, Z+6	; 0x06
    1d4e:	37 81       	ldd	r19, Z+7	; 0x07
    1d50:	2f 5f       	subi	r18, 0xFF	; 255
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	37 83       	std	Z+7, r19	; 0x07
    1d56:	26 83       	std	Z+6, r18	; 0x06
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <fputc+0x6e>
    1d5a:	8b 01       	movw	r16, r22
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	fb 01       	movw	r30, r22
    1d60:	00 84       	ldd	r0, Z+8	; 0x08
    1d62:	f1 85       	ldd	r31, Z+9	; 0x09
    1d64:	e0 2d       	mov	r30, r0
    1d66:	09 95       	icall
    1d68:	89 2b       	or	r24, r25
    1d6a:	e1 f6       	brne	.-72     	; 0x1d24 <fputc+0x10>
    1d6c:	d8 01       	movw	r26, r16
    1d6e:	16 96       	adiw	r26, 0x06	; 6
    1d70:	8d 91       	ld	r24, X+
    1d72:	9c 91       	ld	r25, X
    1d74:	17 97       	sbiw	r26, 0x07	; 7
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	17 96       	adiw	r26, 0x07	; 7
    1d7a:	9c 93       	st	X, r25
    1d7c:	8e 93       	st	-X, r24
    1d7e:	16 97       	sbiw	r26, 0x06	; 6
    1d80:	ce 01       	movw	r24, r28
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	08 95       	ret

00001d8c <sprintf>:
    1d8c:	ae e0       	ldi	r26, 0x0E	; 14
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ec ec       	ldi	r30, 0xCC	; 204
    1d92:	fe e0       	ldi	r31, 0x0E	; 14
    1d94:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__prologue_saves__+0x1c>
    1d98:	0d 89       	ldd	r16, Y+21	; 0x15
    1d9a:	1e 89       	ldd	r17, Y+22	; 0x16
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	8c 83       	std	Y+4, r24	; 0x04
    1da0:	1a 83       	std	Y+2, r17	; 0x02
    1da2:	09 83       	std	Y+1, r16	; 0x01
    1da4:	8f ef       	ldi	r24, 0xFF	; 255
    1da6:	9f e7       	ldi	r25, 0x7F	; 127
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	ae 01       	movw	r20, r28
    1dae:	47 5e       	subi	r20, 0xE7	; 231
    1db0:	5f 4f       	sbci	r21, 0xFF	; 255
    1db2:	6f 89       	ldd	r22, Y+23	; 0x17
    1db4:	78 8d       	ldd	r23, Y+24	; 0x18
    1db6:	ce 01       	movw	r24, r28
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <vfprintf>
    1dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    1dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    1dc2:	e0 0f       	add	r30, r16
    1dc4:	f1 1f       	adc	r31, r17
    1dc6:	10 82       	st	Z, r1
    1dc8:	2e 96       	adiw	r28, 0x0e	; 14
    1dca:	e4 e0       	ldi	r30, 0x04	; 4
    1dcc:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__epilogue_restores__+0x1c>

00001dd0 <__ultoa_invert>:
    1dd0:	fa 01       	movw	r30, r20
    1dd2:	aa 27       	eor	r26, r26
    1dd4:	28 30       	cpi	r18, 0x08	; 8
    1dd6:	51 f1       	breq	.+84     	; 0x1e2c <__ultoa_invert+0x5c>
    1dd8:	20 31       	cpi	r18, 0x10	; 16
    1dda:	81 f1       	breq	.+96     	; 0x1e3c <__ultoa_invert+0x6c>
    1ddc:	e8 94       	clt
    1dde:	6f 93       	push	r22
    1de0:	6e 7f       	andi	r22, 0xFE	; 254
    1de2:	6e 5f       	subi	r22, 0xFE	; 254
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	8f 4f       	sbci	r24, 0xFF	; 255
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	af 4f       	sbci	r26, 0xFF	; 255
    1dec:	b1 e0       	ldi	r27, 0x01	; 1
    1dee:	3e d0       	rcall	.+124    	; 0x1e6c <__ultoa_invert+0x9c>
    1df0:	b4 e0       	ldi	r27, 0x04	; 4
    1df2:	3c d0       	rcall	.+120    	; 0x1e6c <__ultoa_invert+0x9c>
    1df4:	67 0f       	add	r22, r23
    1df6:	78 1f       	adc	r23, r24
    1df8:	89 1f       	adc	r24, r25
    1dfa:	9a 1f       	adc	r25, r26
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	68 0f       	add	r22, r24
    1e00:	79 1f       	adc	r23, r25
    1e02:	8a 1f       	adc	r24, r26
    1e04:	91 1d       	adc	r25, r1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	6a 0f       	add	r22, r26
    1e0a:	71 1d       	adc	r23, r1
    1e0c:	81 1d       	adc	r24, r1
    1e0e:	91 1d       	adc	r25, r1
    1e10:	a1 1d       	adc	r26, r1
    1e12:	20 d0       	rcall	.+64     	; 0x1e54 <__ultoa_invert+0x84>
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <__ultoa_invert+0x48>
    1e16:	68 94       	set
    1e18:	3f 91       	pop	r19
    1e1a:	2a e0       	ldi	r18, 0x0A	; 10
    1e1c:	26 9f       	mul	r18, r22
    1e1e:	11 24       	eor	r1, r1
    1e20:	30 19       	sub	r19, r0
    1e22:	30 5d       	subi	r19, 0xD0	; 208
    1e24:	31 93       	st	Z+, r19
    1e26:	de f6       	brtc	.-74     	; 0x1dde <__ultoa_invert+0xe>
    1e28:	cf 01       	movw	r24, r30
    1e2a:	08 95       	ret
    1e2c:	46 2f       	mov	r20, r22
    1e2e:	47 70       	andi	r20, 0x07	; 7
    1e30:	40 5d       	subi	r20, 0xD0	; 208
    1e32:	41 93       	st	Z+, r20
    1e34:	b3 e0       	ldi	r27, 0x03	; 3
    1e36:	0f d0       	rcall	.+30     	; 0x1e56 <__ultoa_invert+0x86>
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__ultoa_invert+0x5c>
    1e3a:	f6 cf       	rjmp	.-20     	; 0x1e28 <__ultoa_invert+0x58>
    1e3c:	46 2f       	mov	r20, r22
    1e3e:	4f 70       	andi	r20, 0x0F	; 15
    1e40:	40 5d       	subi	r20, 0xD0	; 208
    1e42:	4a 33       	cpi	r20, 0x3A	; 58
    1e44:	18 f0       	brcs	.+6      	; 0x1e4c <__ultoa_invert+0x7c>
    1e46:	49 5d       	subi	r20, 0xD9	; 217
    1e48:	31 fd       	sbrc	r19, 1
    1e4a:	40 52       	subi	r20, 0x20	; 32
    1e4c:	41 93       	st	Z+, r20
    1e4e:	02 d0       	rcall	.+4      	; 0x1e54 <__ultoa_invert+0x84>
    1e50:	a9 f7       	brne	.-22     	; 0x1e3c <__ultoa_invert+0x6c>
    1e52:	ea cf       	rjmp	.-44     	; 0x1e28 <__ultoa_invert+0x58>
    1e54:	b4 e0       	ldi	r27, 0x04	; 4
    1e56:	a6 95       	lsr	r26
    1e58:	97 95       	ror	r25
    1e5a:	87 95       	ror	r24
    1e5c:	77 95       	ror	r23
    1e5e:	67 95       	ror	r22
    1e60:	ba 95       	dec	r27
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__ultoa_invert+0x86>
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	61 05       	cpc	r22, r1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	08 95       	ret
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	ac 01       	movw	r20, r24
    1e70:	0a 2e       	mov	r0, r26
    1e72:	06 94       	lsr	r0
    1e74:	57 95       	ror	r21
    1e76:	47 95       	ror	r20
    1e78:	37 95       	ror	r19
    1e7a:	27 95       	ror	r18
    1e7c:	ba 95       	dec	r27
    1e7e:	c9 f7       	brne	.-14     	; 0x1e72 <__ultoa_invert+0xa2>
    1e80:	62 0f       	add	r22, r18
    1e82:	73 1f       	adc	r23, r19
    1e84:	84 1f       	adc	r24, r20
    1e86:	95 1f       	adc	r25, r21
    1e88:	a0 1d       	adc	r26, r0
    1e8a:	08 95       	ret

00001e8c <_exit>:
    1e8c:	f8 94       	cli

00001e8e <__stop_program>:
    1e8e:	ff cf       	rjmp	.-2      	; 0x1e8e <__stop_program>
